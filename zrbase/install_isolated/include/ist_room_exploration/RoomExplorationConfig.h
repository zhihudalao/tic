//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the ist_room_exploration package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __ist_room_exploration__ROOMEXPLORATIONCONFIG_H__
#define __ist_room_exploration__ROOMEXPLORATIONCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace ist_room_exploration
{
  class RoomExplorationConfigStatics;

  class RoomExplorationConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(RoomExplorationConfig &config, const RoomExplorationConfig &max, const RoomExplorationConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const RoomExplorationConfig &config1, const RoomExplorationConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, RoomExplorationConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const RoomExplorationConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, RoomExplorationConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const RoomExplorationConfig &config) const = 0;
      virtual void getValue(const RoomExplorationConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T RoomExplorationConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (RoomExplorationConfig::* field);

      virtual void clamp(RoomExplorationConfig &config, const RoomExplorationConfig &max, const RoomExplorationConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const RoomExplorationConfig &config1, const RoomExplorationConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, RoomExplorationConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const RoomExplorationConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, RoomExplorationConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const RoomExplorationConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const RoomExplorationConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, RoomExplorationConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, RoomExplorationConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<RoomExplorationConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(RoomExplorationConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("room_exploration_algorithm"==(*_i)->name){room_exploration_algorithm = boost::any_cast<int>(val);}
        if("map_correction_closing_neighborhood_size"==(*_i)->name){map_correction_closing_neighborhood_size = boost::any_cast<int>(val);}
        if("return_path"==(*_i)->name){return_path = boost::any_cast<bool>(val);}
        if("execute_path"==(*_i)->name){execute_path = boost::any_cast<bool>(val);}
        if("goal_eps"==(*_i)->name){goal_eps = boost::any_cast<double>(val);}
        if("use_dyn_goal_eps"==(*_i)->name){use_dyn_goal_eps = boost::any_cast<bool>(val);}
        if("interrupt_navigation_publishing"==(*_i)->name){interrupt_navigation_publishing = boost::any_cast<bool>(val);}
        if("revisit_areas"==(*_i)->name){revisit_areas = boost::any_cast<bool>(val);}
        if("left_sections_min_area"==(*_i)->name){left_sections_min_area = boost::any_cast<double>(val);}
        if("global_costmap_topic"==(*_i)->name){global_costmap_topic = boost::any_cast<std::string>(val);}
        if("coverage_check_service_name"==(*_i)->name){coverage_check_service_name = boost::any_cast<std::string>(val);}
        if("map_frame"==(*_i)->name){map_frame = boost::any_cast<std::string>(val);}
        if("camera_frame"==(*_i)->name){camera_frame = boost::any_cast<std::string>(val);}
        if("tsp_solver"==(*_i)->name){tsp_solver = boost::any_cast<int>(val);}
        if("tsp_solver_timeout"==(*_i)->name){tsp_solver_timeout = boost::any_cast<int>(val);}
        if("min_cell_area"==(*_i)->name){min_cell_area = boost::any_cast<double>(val);}
        if("max_cell_area"==(*_i)->name){max_cell_area = boost::any_cast<double>(val);}
        if("path_eps"==(*_i)->name){path_eps = boost::any_cast<double>(val);}
        if("grid_obstacle_offset"==(*_i)->name){grid_obstacle_offset = boost::any_cast<double>(val);}
        if("step_size"==(*_i)->name){step_size = boost::any_cast<double>(val);}
        if("A"==(*_i)->name){A = boost::any_cast<int>(val);}
        if("B"==(*_i)->name){B = boost::any_cast<int>(val);}
        if("D"==(*_i)->name){D = boost::any_cast<int>(val);}
        if("E"==(*_i)->name){E = boost::any_cast<int>(val);}
        if("mu"==(*_i)->name){mu = boost::any_cast<double>(val);}
        if("delta_theta_weight"==(*_i)->name){delta_theta_weight = boost::any_cast<double>(val);}
        if("cell_size"==(*_i)->name){cell_size = boost::any_cast<int>(val);}
        if("delta_theta"==(*_i)->name){delta_theta = boost::any_cast<double>(val);}
        if("curvature_factor"==(*_i)->name){curvature_factor = boost::any_cast<double>(val);}
        if("max_distance_factor"==(*_i)->name){max_distance_factor = boost::any_cast<double>(val);}
      }
    }

    int room_exploration_algorithm;
int map_correction_closing_neighborhood_size;
bool return_path;
bool execute_path;
double goal_eps;
bool use_dyn_goal_eps;
bool interrupt_navigation_publishing;
bool revisit_areas;
double left_sections_min_area;
std::string global_costmap_topic;
std::string coverage_check_service_name;
std::string map_frame;
std::string camera_frame;
int tsp_solver;
int tsp_solver_timeout;
double min_cell_area;
double max_cell_area;
double path_eps;
double grid_obstacle_offset;
double step_size;
int A;
int B;
int D;
int E;
double mu;
double delta_theta_weight;
int cell_size;
double delta_theta;
double curvature_factor;
double max_distance_factor;

    bool state;
    std::string name;

    
}groups;



//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int room_exploration_algorithm;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int map_correction_closing_neighborhood_size;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool return_path;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool execute_path;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double goal_eps;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool use_dyn_goal_eps;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool interrupt_navigation_publishing;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool revisit_areas;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double left_sections_min_area;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string global_costmap_topic;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string coverage_check_service_name;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string map_frame;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string camera_frame;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int tsp_solver;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int tsp_solver_timeout;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double min_cell_area;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_cell_area;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double path_eps;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double grid_obstacle_offset;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double step_size;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int A;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int B;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int D;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int E;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double mu;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double delta_theta_weight;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int cell_size;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double delta_theta;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double curvature_factor;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_distance_factor;
//#line 228 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("RoomExplorationConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const RoomExplorationConfig &__max__ = __getMax__();
      const RoomExplorationConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const RoomExplorationConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const RoomExplorationConfig &__getDefault__();
    static const RoomExplorationConfig &__getMax__();
    static const RoomExplorationConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const RoomExplorationConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void RoomExplorationConfig::ParamDescription<std::string>::clamp(RoomExplorationConfig &config, const RoomExplorationConfig &max, const RoomExplorationConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class RoomExplorationConfigStatics
  {
    friend class RoomExplorationConfig;

    RoomExplorationConfigStatics()
    {
RoomExplorationConfig::GroupDescription<RoomExplorationConfig::DEFAULT, RoomExplorationConfig> Default("Default", "", 0, 0, true, &RoomExplorationConfig::groups);
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.room_exploration_algorithm = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.room_exploration_algorithm = 8;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.room_exploration_algorithm = 2;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<int>("room_exploration_algorithm", "int", 0, "Exploration method", "{'enum_description': 'Exploration algorithm', 'enum': [{'srcline': 9, 'description': 'Use the grid point exploration algorithm.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'GridPointExplorator'}, {'srcline': 10, 'description': 'Use the boustrophedon exploration algorithm.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'BoustrophedonExplorator'}, {'srcline': 11, 'description': 'Use the neural network exploration algorithm.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'NeuralNetworkExplorator'}, {'srcline': 12, 'description': 'Use the convexSPP exploration algorithm.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'ConvexSPPExplorator'}, {'srcline': 13, 'description': 'Use the flowNetwork exploration algorithm.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'FlowNetworkExplorator'}, {'srcline': 14, 'description': 'Use the energyFunctional exploration algorithm.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 6, 'ctype': 'int', 'type': 'int', 'name': 'EnergyFunctionalExplorator'}, {'srcline': 15, 'description': 'Use the voronoi exploration algorithm.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'VoronoiExplorator'}, {'srcline': 16, 'description': 'Use a variant of the boustrophedon exploration algorithm.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'BoustrophedonVariantExplorator'}]}", &RoomExplorationConfig::room_exploration_algorithm)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<int>("room_exploration_algorithm", "int", 0, "Exploration method", "{'enum_description': 'Exploration algorithm', 'enum': [{'srcline': 9, 'description': 'Use the grid point exploration algorithm.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'GridPointExplorator'}, {'srcline': 10, 'description': 'Use the boustrophedon exploration algorithm.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'BoustrophedonExplorator'}, {'srcline': 11, 'description': 'Use the neural network exploration algorithm.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'NeuralNetworkExplorator'}, {'srcline': 12, 'description': 'Use the convexSPP exploration algorithm.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'ConvexSPPExplorator'}, {'srcline': 13, 'description': 'Use the flowNetwork exploration algorithm.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'FlowNetworkExplorator'}, {'srcline': 14, 'description': 'Use the energyFunctional exploration algorithm.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 6, 'ctype': 'int', 'type': 'int', 'name': 'EnergyFunctionalExplorator'}, {'srcline': 15, 'description': 'Use the voronoi exploration algorithm.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'VoronoiExplorator'}, {'srcline': 16, 'description': 'Use a variant of the boustrophedon exploration algorithm.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'BoustrophedonVariantExplorator'}]}", &RoomExplorationConfig::room_exploration_algorithm)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.map_correction_closing_neighborhood_size = -1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.map_correction_closing_neighborhood_size = 100;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.map_correction_closing_neighborhood_size = 2;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<int>("map_correction_closing_neighborhood_size", "int", 0, "Applies a closing operation to neglect inaccessible areas and map errors/artifacts if the map_correction_closing_neighborhood_size parameter is larger than 0. The parameter then specifies the iterations (or neighborhood size) of that closing operation..", "", &RoomExplorationConfig::map_correction_closing_neighborhood_size)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<int>("map_correction_closing_neighborhood_size", "int", 0, "Applies a closing operation to neglect inaccessible areas and map errors/artifacts if the map_correction_closing_neighborhood_size parameter is larger than 0. The parameter then specifies the iterations (or neighborhood size) of that closing operation..", "", &RoomExplorationConfig::map_correction_closing_neighborhood_size)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.return_path = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.return_path = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.return_path = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<bool>("return_path", "bool", 0, "Boolean used to determine whether the server should return the computed coverage path in the response message.", "", &RoomExplorationConfig::return_path)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<bool>("return_path", "bool", 0, "Boolean used to determine whether the server should return the computed coverage path in the response message.", "", &RoomExplorationConfig::return_path)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.execute_path = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.execute_path = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.execute_path = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<bool>("execute_path", "bool", 0, "Boolean used to determine whether the server should navigate the robot along the computed coverage path.", "", &RoomExplorationConfig::execute_path)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<bool>("execute_path", "bool", 0, "Boolean used to determine whether the server should navigate the robot along the computed coverage path.", "", &RoomExplorationConfig::execute_path)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.goal_eps = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.goal_eps = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.goal_eps = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("goal_eps", "double", 0, "Distance from robot to published goal to publish the next goal in the path.", "", &RoomExplorationConfig::goal_eps)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("goal_eps", "double", 0, "Distance from robot to published goal to publish the next goal in the path.", "", &RoomExplorationConfig::goal_eps)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.use_dyn_goal_eps = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.use_dyn_goal_eps = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.use_dyn_goal_eps = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<bool>("use_dyn_goal_eps", "bool", 0, "Use a dynamic goal distance criterion: the larger the path's curvature, the more accurate the navigation.", "", &RoomExplorationConfig::use_dyn_goal_eps)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<bool>("use_dyn_goal_eps", "bool", 0, "Use a dynamic goal distance criterion: the larger the path's curvature, the more accurate the navigation.", "", &RoomExplorationConfig::use_dyn_goal_eps)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.interrupt_navigation_publishing = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.interrupt_navigation_publishing = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.interrupt_navigation_publishing = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<bool>("interrupt_navigation_publishing", "bool", 0, "Interrupt the publishing of navigation goals as long as needed.", "", &RoomExplorationConfig::interrupt_navigation_publishing)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<bool>("interrupt_navigation_publishing", "bool", 0, "Interrupt the publishing of navigation goals as long as needed.", "", &RoomExplorationConfig::interrupt_navigation_publishing)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.revisit_areas = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.revisit_areas = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.revisit_areas = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<bool>("revisit_areas", "bool", 0, "Revisiting not seen areas due to dynamic obstacles on/off.", "", &RoomExplorationConfig::revisit_areas)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<bool>("revisit_areas", "bool", 0, "Revisiting not seen areas due to dynamic obstacles on/off.", "", &RoomExplorationConfig::revisit_areas)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.left_sections_min_area = 1e-07;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.left_sections_min_area = std::numeric_limits<double>::infinity();
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.left_sections_min_area = 0.01;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("left_sections_min_area", "double", 0, "Minimal size of left sections to revisit them after one go [m^2].", "", &RoomExplorationConfig::left_sections_min_area)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("left_sections_min_area", "double", 0, "Minimal size of left sections to revisit them after one go [m^2].", "", &RoomExplorationConfig::left_sections_min_area)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.global_costmap_topic = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.global_costmap_topic = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.global_costmap_topic = "/move_base/global_costmap/costmap";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<std::string>("global_costmap_topic", "str", 0, "The name of the global costmap topic.", "", &RoomExplorationConfig::global_costmap_topic)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<std::string>("global_costmap_topic", "str", 0, "The name of the global costmap topic.", "", &RoomExplorationConfig::global_costmap_topic)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.coverage_check_service_name = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.coverage_check_service_name = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.coverage_check_service_name = "/room_exploration/coverage_check_server/coverage_check";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<std::string>("coverage_check_service_name", "str", 0, "The name of the service to call for a coverage check of the driven trajectory.", "", &RoomExplorationConfig::coverage_check_service_name)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<std::string>("coverage_check_service_name", "str", 0, "The name of the service to call for a coverage check of the driven trajectory.", "", &RoomExplorationConfig::coverage_check_service_name)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.map_frame = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.map_frame = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.map_frame = "map";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<std::string>("map_frame", "str", 0, "The name of the map frame, used for tracking of the robot.", "", &RoomExplorationConfig::map_frame)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<std::string>("map_frame", "str", 0, "The name of the map frame, used for tracking of the robot.", "", &RoomExplorationConfig::map_frame)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.camera_frame = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.camera_frame = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.camera_frame = "base_link";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<std::string>("camera_frame", "str", 0, "The name of the camera frame, that is in the same kinematic chain as the map_frame and shows the camera pose.", "", &RoomExplorationConfig::camera_frame)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<std::string>("camera_frame", "str", 0, "The name of the camera frame, that is in the same kinematic chain as the map_frame and shows the camera pose.", "", &RoomExplorationConfig::camera_frame)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.tsp_solver = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.tsp_solver = 3;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.tsp_solver = 3;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<int>("tsp_solver", "int", 0, "Exploration method", "{'enum_description': 'Indicates which TSP solver should be used.', 'enum': [{'srcline': 59, 'description': 'Use the Nearest Neighbor TSP algorithm.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'NearestNeighborTSP'}, {'srcline': 60, 'description': 'Use the Genetic TSP solver.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'GeneticTSP'}, {'srcline': 61, 'description': 'Use the Concorde TSP solver.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'ConcordeTSP'}]}", &RoomExplorationConfig::tsp_solver)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<int>("tsp_solver", "int", 0, "Exploration method", "{'enum_description': 'Indicates which TSP solver should be used.', 'enum': [{'srcline': 59, 'description': 'Use the Nearest Neighbor TSP algorithm.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'NearestNeighborTSP'}, {'srcline': 60, 'description': 'Use the Genetic TSP solver.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'GeneticTSP'}, {'srcline': 61, 'description': 'Use the Concorde TSP solver.', 'srcfile': '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'ConcordeTSP'}]}", &RoomExplorationConfig::tsp_solver)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.tsp_solver_timeout = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.tsp_solver_timeout = 2147483647;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.tsp_solver_timeout = 600;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<int>("tsp_solver_timeout", "int", 0, "A sophisticated solver like Concorde or Genetic can be interrupted if it does not find a solution within this time (in [s]), and then falls back to the nearest neighbor solver.", "", &RoomExplorationConfig::tsp_solver_timeout)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<int>("tsp_solver_timeout", "int", 0, "A sophisticated solver like Concorde or Genetic can be interrupted if it does not find a solution within this time (in [s]), and then falls back to the nearest neighbor solver.", "", &RoomExplorationConfig::tsp_solver_timeout)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_cell_area = 1e-07;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_cell_area = std::numeric_limits<double>::infinity();
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_cell_area = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("min_cell_area", "double", 0, "Minimum area of one cell for the boustrophedon explorator.", "", &RoomExplorationConfig::min_cell_area)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("min_cell_area", "double", 0, "Minimum area of one cell for the boustrophedon explorator.", "", &RoomExplorationConfig::min_cell_area)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_cell_area = 1e-07;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_cell_area = std::numeric_limits<double>::infinity();
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_cell_area = 10.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("max_cell_area", "double", 0, "Minimum area of one cell for the boustrophedon explorator.", "", &RoomExplorationConfig::max_cell_area)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("max_cell_area", "double", 0, "Minimum area of one cell for the boustrophedon explorator.", "", &RoomExplorationConfig::max_cell_area)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.path_eps = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.path_eps = std::numeric_limits<double>::infinity();
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.path_eps = 2.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("path_eps", "double", 0, "Minimal distance between two points on the generated path [pixel].", "", &RoomExplorationConfig::path_eps)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("path_eps", "double", 0, "Minimal distance between two points on the generated path [pixel].", "", &RoomExplorationConfig::path_eps)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.grid_obstacle_offset = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.grid_obstacle_offset = std::numeric_limits<double>::infinity();
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.grid_obstacle_offset = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("grid_obstacle_offset", "double", 0, "Allows to displace the grid by more than the standard half_grid_size from obstacles [m].", "", &RoomExplorationConfig::grid_obstacle_offset)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("grid_obstacle_offset", "double", 0, "Allows to displace the grid by more than the standard half_grid_size from obstacles [m].", "", &RoomExplorationConfig::grid_obstacle_offset)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.step_size = 0.0001;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.step_size = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.step_size = 0.008;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("step_size", "double", 0, "Step size for integrating the state dynamics of the neural network.", "", &RoomExplorationConfig::step_size)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("step_size", "double", 0, "Step size for integrating the state dynamics of the neural network.", "", &RoomExplorationConfig::step_size)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.A = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.A = 2147483647;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.A = 17;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<int>("A", "int", 0, "Decaying parameter that pulls the activity of a neuron closer to zero, larger value means faster decreasing.", "", &RoomExplorationConfig::A)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<int>("A", "int", 0, "Decaying parameter that pulls the activity of a neuron closer to zero, larger value means faster decreasing.", "", &RoomExplorationConfig::A)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.B = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.B = 2147483647;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.B = 5;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<int>("B", "int", 0, "Increasing parameter that tries to increase the activity of a neuron, higher value means a higher desired value and a faster increasing at the beginning.", "", &RoomExplorationConfig::B)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<int>("B", "int", 0, "Increasing parameter that tries to increase the activity of a neuron, higher value means a higher desired value and a faster increasing at the beginning.", "", &RoomExplorationConfig::B)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.D = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.D = 2147483647;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.D = 7;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<int>("D", "int", 0, "Decreasing parameter when the neuron is labeled as obstacle, higher value means faster decreasing.", "", &RoomExplorationConfig::D)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<int>("D", "int", 0, "Decreasing parameter when the neuron is labeled as obstacle, higher value means faster decreasing.", "", &RoomExplorationConfig::D)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.E = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.E = 2147483647;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.E = 80;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<int>("E", "int", 0, "External input parameter of one neuron that is used in the dynamics corresponding to if it is an obstacle or uncleaned/cleaned, E>>B.", "", &RoomExplorationConfig::E)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<int>("E", "int", 0, "External input parameter of one neuron that is used in the dynamics corresponding to if it is an obstacle or uncleaned/cleaned, E>>B.", "", &RoomExplorationConfig::E)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.mu = 0.001;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.mu = std::numeric_limits<double>::infinity();
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.mu = 1.03;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("mu", "double", 0, "Parameter to set the importance of the states of neighboring neurons to the dynamics, higher value means higher influence.", "", &RoomExplorationConfig::mu)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("mu", "double", 0, "Parameter to set the importance of the states of neighboring neurons to the dynamics, higher value means higher influence.", "", &RoomExplorationConfig::mu)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.delta_theta_weight = 0.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.delta_theta_weight = std::numeric_limits<double>::infinity();
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.delta_theta_weight = 0.15;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("delta_theta_weight", "double", 0, "Parameter to set the importance of the traveleing direction from the previous step and the next step, a higher value means that the robot should turn less.", "", &RoomExplorationConfig::delta_theta_weight)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("delta_theta_weight", "double", 0, "Parameter to set the importance of the traveleing direction from the previous step and the next step, a higher value means that the robot should turn less.", "", &RoomExplorationConfig::delta_theta_weight)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cell_size = -1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cell_size = 2147483647;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cell_size = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<int>("cell_size", "int", 0, "Side length of one grid cell, when discretizing the free space.", "", &RoomExplorationConfig::cell_size)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<int>("cell_size", "int", 0, "Side length of one grid cell, when discretizing the free space.", "", &RoomExplorationConfig::cell_size)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.delta_theta = 0.0001;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.delta_theta = std::numeric_limits<double>::infinity();
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.delta_theta = 1.570796;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("delta_theta", "double", 0, "Sampling angle when creating possible sensing poses.", "", &RoomExplorationConfig::delta_theta)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("delta_theta", "double", 0, "Sampling angle when creating possible sensing poses.", "", &RoomExplorationConfig::delta_theta)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.curvature_factor = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.curvature_factor = std::numeric_limits<double>::infinity();
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.curvature_factor = 1.1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("curvature_factor", "double", 0, "Factor an arc can be longer than a straight arc.", "", &RoomExplorationConfig::curvature_factor)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("curvature_factor", "double", 0, "Factor an arc can be longer than a straight arc.", "", &RoomExplorationConfig::curvature_factor)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_distance_factor = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_distance_factor = std::numeric_limits<double>::infinity();
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_distance_factor = 1.0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("max_distance_factor", "double", 0, "#Factor, an arc can be longer than the maximal distance of the room.", "", &RoomExplorationConfig::max_distance_factor)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(RoomExplorationConfig::AbstractParamDescriptionConstPtr(new RoomExplorationConfig::ParamDescription<double>("max_distance_factor", "double", 0, "#Factor, an arc can be longer than the maximal distance of the room.", "", &RoomExplorationConfig::max_distance_factor)));
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(RoomExplorationConfig::AbstractGroupDescriptionConstPtr(new RoomExplorationConfig::GroupDescription<RoomExplorationConfig::DEFAULT, RoomExplorationConfig>(Default)));
//#line 366 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<RoomExplorationConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<RoomExplorationConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<RoomExplorationConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    RoomExplorationConfig __max__;
    RoomExplorationConfig __min__;
    RoomExplorationConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const RoomExplorationConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static RoomExplorationConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &RoomExplorationConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const RoomExplorationConfig &RoomExplorationConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const RoomExplorationConfig &RoomExplorationConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const RoomExplorationConfig &RoomExplorationConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<RoomExplorationConfig::AbstractParamDescriptionConstPtr> &RoomExplorationConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<RoomExplorationConfig::AbstractGroupDescriptionConstPtr> &RoomExplorationConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const RoomExplorationConfigStatics *RoomExplorationConfig::__get_statics__()
  {
    const static RoomExplorationConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = RoomExplorationConfigStatics::get_instance();

    return statics;
  }

//#line 9 "/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg"
      const int RoomExploration_GridPointExplorator = 1;
//#line 10 "/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg"
      const int RoomExploration_BoustrophedonExplorator = 2;
//#line 11 "/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg"
      const int RoomExploration_NeuralNetworkExplorator = 3;
//#line 12 "/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg"
      const int RoomExploration_ConvexSPPExplorator = 4;
//#line 13 "/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg"
      const int RoomExploration_FlowNetworkExplorator = 5;
//#line 14 "/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg"
      const int RoomExploration_EnergyFunctionalExplorator = 6;
//#line 15 "/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg"
      const int RoomExploration_VoronoiExplorator = 7;
//#line 16 "/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg"
      const int RoomExploration_BoustrophedonVariantExplorator = 8;
//#line 59 "/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg"
      const int RoomExploration_NearestNeighborTSP = 1;
//#line 60 "/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg"
      const int RoomExploration_GeneticTSP = 2;
//#line 61 "/home/ubuntu/zrbase/src/caei/ist_exploration/ist_room_exploration/cfg/RoomExploration.cfg"
      const int RoomExploration_ConcordeTSP = 3;
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __ROOMEXPLORATIONRECONFIGURATOR_H__
