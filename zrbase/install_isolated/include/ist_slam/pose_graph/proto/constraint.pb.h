// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ist_slam/pose_graph/proto/constraint.proto

#ifndef PROTOBUF_ist_5fslam_2fpose_5fgraph_2fproto_2fconstraint_2eproto__INCLUDED
#define PROTOBUF_ist_5fslam_2fpose_5fgraph_2fproto_2fconstraint_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ist_slam/pose_graph/proto/loss_function.pb.h"
#include "ist_slam/pose_graph/proto/cost_function.pb.h"
// @@protoc_insertion_point(includes)
namespace ist_slam {
namespace pose_graph {
namespace proto {
class Constraint;
class ConstraintDefaultTypeInternal;
extern ConstraintDefaultTypeInternal _Constraint_default_instance_;
}  // namespace proto
}  // namespace pose_graph
}  // namespace ist_slam

namespace ist_slam {
namespace pose_graph {
namespace proto {

namespace protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fconstraint_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fconstraint_2eproto

// ===================================================================

class Constraint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ist_slam.pose_graph.proto.Constraint) */ {
 public:
  Constraint();
  virtual ~Constraint();

  Constraint(const Constraint& from);

  inline Constraint& operator=(const Constraint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Constraint(Constraint&& from) noexcept
    : Constraint() {
    *this = ::std::move(from);
  }

  inline Constraint& operator=(Constraint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Constraint& default_instance();

  static inline const Constraint* internal_default_instance() {
    return reinterpret_cast<const Constraint*>(
               &_Constraint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Constraint* other);
  friend void swap(Constraint& a, Constraint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Constraint* New() const PROTOBUF_FINAL { return New(NULL); }

  Constraint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Constraint& from);
  void MergeFrom(const Constraint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Constraint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .ist_slam.pose_graph.proto.CostFunction cost_function = 2;
  bool has_cost_function() const;
  void clear_cost_function();
  static const int kCostFunctionFieldNumber = 2;
  const ::ist_slam::pose_graph::proto::CostFunction& cost_function() const;
  ::ist_slam::pose_graph::proto::CostFunction* mutable_cost_function();
  ::ist_slam::pose_graph::proto::CostFunction* release_cost_function();
  void set_allocated_cost_function(::ist_slam::pose_graph::proto::CostFunction* cost_function);

  // .ist_slam.pose_graph.proto.LossFunction loss_function = 3;
  bool has_loss_function() const;
  void clear_loss_function();
  static const int kLossFunctionFieldNumber = 3;
  const ::ist_slam::pose_graph::proto::LossFunction& loss_function() const;
  ::ist_slam::pose_graph::proto::LossFunction* mutable_loss_function();
  ::ist_slam::pose_graph::proto::LossFunction* release_loss_function();
  void set_allocated_loss_function(::ist_slam::pose_graph::proto::LossFunction* loss_function);

  // @@protoc_insertion_point(class_scope:ist_slam.pose_graph.proto.Constraint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::ist_slam::pose_graph::proto::CostFunction* cost_function_;
  ::ist_slam::pose_graph::proto::LossFunction* loss_function_;
  mutable int _cached_size_;
  friend struct protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fconstraint_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Constraint

// string id = 1;
inline void Constraint::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Constraint::id() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.Constraint.id)
  return id_.GetNoArena();
}
inline void Constraint::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ist_slam.pose_graph.proto.Constraint.id)
}
#if LANG_CXX11
inline void Constraint::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ist_slam.pose_graph.proto.Constraint.id)
}
#endif
inline void Constraint::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ist_slam.pose_graph.proto.Constraint.id)
}
inline void Constraint::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ist_slam.pose_graph.proto.Constraint.id)
}
inline ::std::string* Constraint::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.Constraint.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Constraint::release_id() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.Constraint.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Constraint::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.Constraint.id)
}

// .ist_slam.pose_graph.proto.CostFunction cost_function = 2;
inline bool Constraint::has_cost_function() const {
  return this != internal_default_instance() && cost_function_ != NULL;
}
inline void Constraint::clear_cost_function() {
  if (GetArenaNoVirtual() == NULL && cost_function_ != NULL) delete cost_function_;
  cost_function_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::CostFunction& Constraint::cost_function() const {
  const ::ist_slam::pose_graph::proto::CostFunction* p = cost_function_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.Constraint.cost_function)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::CostFunction*>(
      &::ist_slam::pose_graph::proto::_CostFunction_default_instance_);
}
inline ::ist_slam::pose_graph::proto::CostFunction* Constraint::mutable_cost_function() {
  
  if (cost_function_ == NULL) {
    cost_function_ = new ::ist_slam::pose_graph::proto::CostFunction;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.Constraint.cost_function)
  return cost_function_;
}
inline ::ist_slam::pose_graph::proto::CostFunction* Constraint::release_cost_function() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.Constraint.cost_function)
  
  ::ist_slam::pose_graph::proto::CostFunction* temp = cost_function_;
  cost_function_ = NULL;
  return temp;
}
inline void Constraint::set_allocated_cost_function(::ist_slam::pose_graph::proto::CostFunction* cost_function) {
  delete cost_function_;
  cost_function_ = cost_function;
  if (cost_function) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.Constraint.cost_function)
}

// .ist_slam.pose_graph.proto.LossFunction loss_function = 3;
inline bool Constraint::has_loss_function() const {
  return this != internal_default_instance() && loss_function_ != NULL;
}
inline void Constraint::clear_loss_function() {
  if (GetArenaNoVirtual() == NULL && loss_function_ != NULL) delete loss_function_;
  loss_function_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::LossFunction& Constraint::loss_function() const {
  const ::ist_slam::pose_graph::proto::LossFunction* p = loss_function_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.Constraint.loss_function)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::LossFunction*>(
      &::ist_slam::pose_graph::proto::_LossFunction_default_instance_);
}
inline ::ist_slam::pose_graph::proto::LossFunction* Constraint::mutable_loss_function() {
  
  if (loss_function_ == NULL) {
    loss_function_ = new ::ist_slam::pose_graph::proto::LossFunction;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.Constraint.loss_function)
  return loss_function_;
}
inline ::ist_slam::pose_graph::proto::LossFunction* Constraint::release_loss_function() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.Constraint.loss_function)
  
  ::ist_slam::pose_graph::proto::LossFunction* temp = loss_function_;
  loss_function_ = NULL;
  return temp;
}
inline void Constraint::set_allocated_loss_function(::ist_slam::pose_graph::proto::LossFunction* loss_function) {
  delete loss_function_;
  loss_function_ = loss_function;
  if (loss_function) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.Constraint.loss_function)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace pose_graph
}  // namespace ist_slam

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ist_5fslam_2fpose_5fgraph_2fproto_2fconstraint_2eproto__INCLUDED
