// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ist_slam/pose_graph/proto/loss_function.proto

#ifndef PROTOBUF_ist_5fslam_2fpose_5fgraph_2fproto_2floss_5ffunction_2eproto__INCLUDED
#define PROTOBUF_ist_5fslam_2fpose_5fgraph_2fproto_2floss_5ffunction_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ist_slam {
namespace pose_graph {
namespace proto {
class HuberLoss;
class HuberLossDefaultTypeInternal;
extern HuberLossDefaultTypeInternal _HuberLoss_default_instance_;
class LossFunction;
class LossFunctionDefaultTypeInternal;
extern LossFunctionDefaultTypeInternal _LossFunction_default_instance_;
class QuadraticLoss;
class QuadraticLossDefaultTypeInternal;
extern QuadraticLossDefaultTypeInternal _QuadraticLoss_default_instance_;
}  // namespace proto
}  // namespace pose_graph
}  // namespace ist_slam

namespace ist_slam {
namespace pose_graph {
namespace proto {

namespace protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2floss_5ffunction_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2floss_5ffunction_2eproto

// ===================================================================

class QuadraticLoss : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ist_slam.pose_graph.proto.QuadraticLoss) */ {
 public:
  QuadraticLoss();
  virtual ~QuadraticLoss();

  QuadraticLoss(const QuadraticLoss& from);

  inline QuadraticLoss& operator=(const QuadraticLoss& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuadraticLoss(QuadraticLoss&& from) noexcept
    : QuadraticLoss() {
    *this = ::std::move(from);
  }

  inline QuadraticLoss& operator=(QuadraticLoss&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuadraticLoss& default_instance();

  static inline const QuadraticLoss* internal_default_instance() {
    return reinterpret_cast<const QuadraticLoss*>(
               &_QuadraticLoss_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(QuadraticLoss* other);
  friend void swap(QuadraticLoss& a, QuadraticLoss& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuadraticLoss* New() const PROTOBUF_FINAL { return New(NULL); }

  QuadraticLoss* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuadraticLoss& from);
  void MergeFrom(const QuadraticLoss& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuadraticLoss* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ist_slam.pose_graph.proto.QuadraticLoss)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2floss_5ffunction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HuberLoss : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ist_slam.pose_graph.proto.HuberLoss) */ {
 public:
  HuberLoss();
  virtual ~HuberLoss();

  HuberLoss(const HuberLoss& from);

  inline HuberLoss& operator=(const HuberLoss& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HuberLoss(HuberLoss&& from) noexcept
    : HuberLoss() {
    *this = ::std::move(from);
  }

  inline HuberLoss& operator=(HuberLoss&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HuberLoss& default_instance();

  static inline const HuberLoss* internal_default_instance() {
    return reinterpret_cast<const HuberLoss*>(
               &_HuberLoss_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(HuberLoss* other);
  friend void swap(HuberLoss& a, HuberLoss& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HuberLoss* New() const PROTOBUF_FINAL { return New(NULL); }

  HuberLoss* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HuberLoss& from);
  void MergeFrom(const HuberLoss& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HuberLoss* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double scale = 1;
  void clear_scale();
  static const int kScaleFieldNumber = 1;
  double scale() const;
  void set_scale(double value);

  // @@protoc_insertion_point(class_scope:ist_slam.pose_graph.proto.HuberLoss)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double scale_;
  mutable int _cached_size_;
  friend struct protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2floss_5ffunction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LossFunction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ist_slam.pose_graph.proto.LossFunction) */ {
 public:
  LossFunction();
  virtual ~LossFunction();

  LossFunction(const LossFunction& from);

  inline LossFunction& operator=(const LossFunction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LossFunction(LossFunction&& from) noexcept
    : LossFunction() {
    *this = ::std::move(from);
  }

  inline LossFunction& operator=(LossFunction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LossFunction& default_instance();

  enum TypeCase {
    kQuadraticLoss = 1,
    kHuberLoss = 2,
    TYPE_NOT_SET = 0,
  };

  static inline const LossFunction* internal_default_instance() {
    return reinterpret_cast<const LossFunction*>(
               &_LossFunction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LossFunction* other);
  friend void swap(LossFunction& a, LossFunction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LossFunction* New() const PROTOBUF_FINAL { return New(NULL); }

  LossFunction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LossFunction& from);
  void MergeFrom(const LossFunction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LossFunction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ist_slam.pose_graph.proto.QuadraticLoss quadratic_loss = 1;
  bool has_quadratic_loss() const;
  void clear_quadratic_loss();
  static const int kQuadraticLossFieldNumber = 1;
  const ::ist_slam::pose_graph::proto::QuadraticLoss& quadratic_loss() const;
  ::ist_slam::pose_graph::proto::QuadraticLoss* mutable_quadratic_loss();
  ::ist_slam::pose_graph::proto::QuadraticLoss* release_quadratic_loss();
  void set_allocated_quadratic_loss(::ist_slam::pose_graph::proto::QuadraticLoss* quadratic_loss);

  // .ist_slam.pose_graph.proto.HuberLoss huber_loss = 2;
  bool has_huber_loss() const;
  void clear_huber_loss();
  static const int kHuberLossFieldNumber = 2;
  const ::ist_slam::pose_graph::proto::HuberLoss& huber_loss() const;
  ::ist_slam::pose_graph::proto::HuberLoss* mutable_huber_loss();
  ::ist_slam::pose_graph::proto::HuberLoss* release_huber_loss();
  void set_allocated_huber_loss(::ist_slam::pose_graph::proto::HuberLoss* huber_loss);

  TypeCase Type_case() const;
  // @@protoc_insertion_point(class_scope:ist_slam.pose_graph.proto.LossFunction)
 private:
  void set_has_quadratic_loss();
  void set_has_huber_loss();

  inline bool has_Type() const;
  void clear_Type();
  inline void clear_has_Type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::ist_slam::pose_graph::proto::QuadraticLoss* quadratic_loss_;
    ::ist_slam::pose_graph::proto::HuberLoss* huber_loss_;
  } Type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2floss_5ffunction_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QuadraticLoss

// -------------------------------------------------------------------

// HuberLoss

// double scale = 1;
inline void HuberLoss::clear_scale() {
  scale_ = 0;
}
inline double HuberLoss::scale() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.HuberLoss.scale)
  return scale_;
}
inline void HuberLoss::set_scale(double value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:ist_slam.pose_graph.proto.HuberLoss.scale)
}

// -------------------------------------------------------------------

// LossFunction

// .ist_slam.pose_graph.proto.QuadraticLoss quadratic_loss = 1;
inline bool LossFunction::has_quadratic_loss() const {
  return Type_case() == kQuadraticLoss;
}
inline void LossFunction::set_has_quadratic_loss() {
  _oneof_case_[0] = kQuadraticLoss;
}
inline void LossFunction::clear_quadratic_loss() {
  if (has_quadratic_loss()) {
    delete Type_.quadratic_loss_;
    clear_has_Type();
  }
}
inline  const ::ist_slam::pose_graph::proto::QuadraticLoss& LossFunction::quadratic_loss() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.LossFunction.quadratic_loss)
  return has_quadratic_loss()
      ? *Type_.quadratic_loss_
      : ::ist_slam::pose_graph::proto::QuadraticLoss::default_instance();
}
inline ::ist_slam::pose_graph::proto::QuadraticLoss* LossFunction::mutable_quadratic_loss() {
  if (!has_quadratic_loss()) {
    clear_Type();
    set_has_quadratic_loss();
    Type_.quadratic_loss_ = new ::ist_slam::pose_graph::proto::QuadraticLoss;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.LossFunction.quadratic_loss)
  return Type_.quadratic_loss_;
}
inline ::ist_slam::pose_graph::proto::QuadraticLoss* LossFunction::release_quadratic_loss() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.LossFunction.quadratic_loss)
  if (has_quadratic_loss()) {
    clear_has_Type();
    ::ist_slam::pose_graph::proto::QuadraticLoss* temp = Type_.quadratic_loss_;
    Type_.quadratic_loss_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LossFunction::set_allocated_quadratic_loss(::ist_slam::pose_graph::proto::QuadraticLoss* quadratic_loss) {
  clear_Type();
  if (quadratic_loss) {
    set_has_quadratic_loss();
    Type_.quadratic_loss_ = quadratic_loss;
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.LossFunction.quadratic_loss)
}

// .ist_slam.pose_graph.proto.HuberLoss huber_loss = 2;
inline bool LossFunction::has_huber_loss() const {
  return Type_case() == kHuberLoss;
}
inline void LossFunction::set_has_huber_loss() {
  _oneof_case_[0] = kHuberLoss;
}
inline void LossFunction::clear_huber_loss() {
  if (has_huber_loss()) {
    delete Type_.huber_loss_;
    clear_has_Type();
  }
}
inline  const ::ist_slam::pose_graph::proto::HuberLoss& LossFunction::huber_loss() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.LossFunction.huber_loss)
  return has_huber_loss()
      ? *Type_.huber_loss_
      : ::ist_slam::pose_graph::proto::HuberLoss::default_instance();
}
inline ::ist_slam::pose_graph::proto::HuberLoss* LossFunction::mutable_huber_loss() {
  if (!has_huber_loss()) {
    clear_Type();
    set_has_huber_loss();
    Type_.huber_loss_ = new ::ist_slam::pose_graph::proto::HuberLoss;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.LossFunction.huber_loss)
  return Type_.huber_loss_;
}
inline ::ist_slam::pose_graph::proto::HuberLoss* LossFunction::release_huber_loss() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.LossFunction.huber_loss)
  if (has_huber_loss()) {
    clear_has_Type();
    ::ist_slam::pose_graph::proto::HuberLoss* temp = Type_.huber_loss_;
    Type_.huber_loss_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void LossFunction::set_allocated_huber_loss(::ist_slam::pose_graph::proto::HuberLoss* huber_loss) {
  clear_Type();
  if (huber_loss) {
    set_has_huber_loss();
    Type_.huber_loss_ = huber_loss;
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.LossFunction.huber_loss)
}

inline bool LossFunction::has_Type() const {
  return Type_case() != TYPE_NOT_SET;
}
inline void LossFunction::clear_has_Type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline LossFunction::TypeCase LossFunction::Type_case() const {
  return LossFunction::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace pose_graph
}  // namespace ist_slam

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ist_5fslam_2fpose_5fgraph_2fproto_2floss_5ffunction_2eproto__INCLUDED
