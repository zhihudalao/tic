// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ist_slam/pose_graph/proto/solver_config.proto

#ifndef PROTOBUF_ist_5fslam_2fpose_5fgraph_2fproto_2fsolver_5fconfig_2eproto__INCLUDED
#define PROTOBUF_ist_5fslam_2fpose_5fgraph_2fproto_2fsolver_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ist_slam/common/proto/ceres_solver_options.pb.h"
// @@protoc_insertion_point(includes)
namespace ist_slam {
namespace pose_graph {
namespace proto {
class SolverConfig;
class SolverConfigDefaultTypeInternal;
extern SolverConfigDefaultTypeInternal _SolverConfig_default_instance_;
}  // namespace proto
}  // namespace pose_graph
}  // namespace ist_slam

namespace ist_slam {
namespace pose_graph {
namespace proto {

namespace protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fsolver_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fsolver_5fconfig_2eproto

// ===================================================================

class SolverConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ist_slam.pose_graph.proto.SolverConfig) */ {
 public:
  SolverConfig();
  virtual ~SolverConfig();

  SolverConfig(const SolverConfig& from);

  inline SolverConfig& operator=(const SolverConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SolverConfig(SolverConfig&& from) noexcept
    : SolverConfig() {
    *this = ::std::move(from);
  }

  inline SolverConfig& operator=(SolverConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverConfig& default_instance();

  static inline const SolverConfig* internal_default_instance() {
    return reinterpret_cast<const SolverConfig*>(
               &_SolverConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SolverConfig* other);
  friend void swap(SolverConfig& a, SolverConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SolverConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  SolverConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SolverConfig& from);
  void MergeFrom(const SolverConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SolverConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ist_slam.common.proto.CeresSolverOptions ceres_options = 2;
  bool has_ceres_options() const;
  void clear_ceres_options();
  static const int kCeresOptionsFieldNumber = 2;
  const ::ist_slam::common::proto::CeresSolverOptions& ceres_options() const;
  ::ist_slam::common::proto::CeresSolverOptions* mutable_ceres_options();
  ::ist_slam::common::proto::CeresSolverOptions* release_ceres_options();
  void set_allocated_ceres_options(::ist_slam::common::proto::CeresSolverOptions* ceres_options);

  // bool log_solver_summary = 1;
  void clear_log_solver_summary();
  static const int kLogSolverSummaryFieldNumber = 1;
  bool log_solver_summary() const;
  void set_log_solver_summary(bool value);

  // @@protoc_insertion_point(class_scope:ist_slam.pose_graph.proto.SolverConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ist_slam::common::proto::CeresSolverOptions* ceres_options_;
  bool log_solver_summary_;
  mutable int _cached_size_;
  friend struct protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fsolver_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SolverConfig

// bool log_solver_summary = 1;
inline void SolverConfig::clear_log_solver_summary() {
  log_solver_summary_ = false;
}
inline bool SolverConfig::log_solver_summary() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.SolverConfig.log_solver_summary)
  return log_solver_summary_;
}
inline void SolverConfig::set_log_solver_summary(bool value) {
  
  log_solver_summary_ = value;
  // @@protoc_insertion_point(field_set:ist_slam.pose_graph.proto.SolverConfig.log_solver_summary)
}

// .ist_slam.common.proto.CeresSolverOptions ceres_options = 2;
inline bool SolverConfig::has_ceres_options() const {
  return this != internal_default_instance() && ceres_options_ != NULL;
}
inline void SolverConfig::clear_ceres_options() {
  if (GetArenaNoVirtual() == NULL && ceres_options_ != NULL) delete ceres_options_;
  ceres_options_ = NULL;
}
inline const ::ist_slam::common::proto::CeresSolverOptions& SolverConfig::ceres_options() const {
  const ::ist_slam::common::proto::CeresSolverOptions* p = ceres_options_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.SolverConfig.ceres_options)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::common::proto::CeresSolverOptions*>(
      &::ist_slam::common::proto::_CeresSolverOptions_default_instance_);
}
inline ::ist_slam::common::proto::CeresSolverOptions* SolverConfig::mutable_ceres_options() {
  
  if (ceres_options_ == NULL) {
    ceres_options_ = new ::ist_slam::common::proto::CeresSolverOptions;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.SolverConfig.ceres_options)
  return ceres_options_;
}
inline ::ist_slam::common::proto::CeresSolverOptions* SolverConfig::release_ceres_options() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.SolverConfig.ceres_options)
  
  ::ist_slam::common::proto::CeresSolverOptions* temp = ceres_options_;
  ceres_options_ = NULL;
  return temp;
}
inline void SolverConfig::set_allocated_ceres_options(::ist_slam::common::proto::CeresSolverOptions* ceres_options) {
  delete ceres_options_;
  ceres_options_ = ceres_options;
  if (ceres_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.SolverConfig.ceres_options)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace pose_graph
}  // namespace ist_slam

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ist_5fslam_2fpose_5fgraph_2fproto_2fsolver_5fconfig_2eproto__INCLUDED
