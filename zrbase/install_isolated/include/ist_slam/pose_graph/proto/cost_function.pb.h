// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ist_slam/pose_graph/proto/cost_function.proto

#ifndef PROTOBUF_ist_5fslam_2fpose_5fgraph_2fproto_2fcost_5ffunction_2eproto__INCLUDED
#define PROTOBUF_ist_5fslam_2fpose_5fgraph_2fproto_2fcost_5ffunction_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ist_slam/pose_graph/proto/node.pb.h"
#include "ist_slam/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)
namespace ist_slam {
namespace pose_graph {
namespace proto {
class Acceleration3D;
class Acceleration3DDefaultTypeInternal;
extern Acceleration3DDefaultTypeInternal _Acceleration3D_default_instance_;
class Acceleration3D_Parameters;
class Acceleration3D_ParametersDefaultTypeInternal;
extern Acceleration3D_ParametersDefaultTypeInternal _Acceleration3D_Parameters_default_instance_;
class CostFunction;
class CostFunctionDefaultTypeInternal;
extern CostFunctionDefaultTypeInternal _CostFunction_default_instance_;
class InterpolatedRelativePose2D;
class InterpolatedRelativePose2DDefaultTypeInternal;
extern InterpolatedRelativePose2DDefaultTypeInternal _InterpolatedRelativePose2D_default_instance_;
class InterpolatedRelativePose2D_Parameters;
class InterpolatedRelativePose2D_ParametersDefaultTypeInternal;
extern InterpolatedRelativePose2D_ParametersDefaultTypeInternal _InterpolatedRelativePose2D_Parameters_default_instance_;
class InterpolatedRelativePose3D;
class InterpolatedRelativePose3DDefaultTypeInternal;
extern InterpolatedRelativePose3DDefaultTypeInternal _InterpolatedRelativePose3D_default_instance_;
class InterpolatedRelativePose3D_Parameters;
class InterpolatedRelativePose3D_ParametersDefaultTypeInternal;
extern InterpolatedRelativePose3D_ParametersDefaultTypeInternal _InterpolatedRelativePose3D_Parameters_default_instance_;
class RelativePose2D;
class RelativePose2DDefaultTypeInternal;
extern RelativePose2DDefaultTypeInternal _RelativePose2D_default_instance_;
class RelativePose2D_Parameters;
class RelativePose2D_ParametersDefaultTypeInternal;
extern RelativePose2D_ParametersDefaultTypeInternal _RelativePose2D_Parameters_default_instance_;
class RelativePose3D;
class RelativePose3DDefaultTypeInternal;
extern RelativePose3DDefaultTypeInternal _RelativePose3D_default_instance_;
class RelativePose3D_Parameters;
class RelativePose3D_ParametersDefaultTypeInternal;
extern RelativePose3D_ParametersDefaultTypeInternal _RelativePose3D_Parameters_default_instance_;
class Rotation3D;
class Rotation3DDefaultTypeInternal;
extern Rotation3DDefaultTypeInternal _Rotation3D_default_instance_;
class Rotation3D_Parameters;
class Rotation3D_ParametersDefaultTypeInternal;
extern Rotation3D_ParametersDefaultTypeInternal _Rotation3D_Parameters_default_instance_;
}  // namespace proto
}  // namespace pose_graph
}  // namespace ist_slam

namespace ist_slam {
namespace pose_graph {
namespace proto {

namespace protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fcost_5ffunction_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fcost_5ffunction_2eproto

// ===================================================================

class RelativePose2D_Parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ist_slam.pose_graph.proto.RelativePose2D.Parameters) */ {
 public:
  RelativePose2D_Parameters();
  virtual ~RelativePose2D_Parameters();

  RelativePose2D_Parameters(const RelativePose2D_Parameters& from);

  inline RelativePose2D_Parameters& operator=(const RelativePose2D_Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RelativePose2D_Parameters(RelativePose2D_Parameters&& from) noexcept
    : RelativePose2D_Parameters() {
    *this = ::std::move(from);
  }

  inline RelativePose2D_Parameters& operator=(RelativePose2D_Parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RelativePose2D_Parameters& default_instance();

  static inline const RelativePose2D_Parameters* internal_default_instance() {
    return reinterpret_cast<const RelativePose2D_Parameters*>(
               &_RelativePose2D_Parameters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RelativePose2D_Parameters* other);
  friend void swap(RelativePose2D_Parameters& a, RelativePose2D_Parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RelativePose2D_Parameters* New() const PROTOBUF_FINAL { return New(NULL); }

  RelativePose2D_Parameters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RelativePose2D_Parameters& from);
  void MergeFrom(const RelativePose2D_Parameters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RelativePose2D_Parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ist_slam.transform.proto.Rigid2d first_t_second = 1;
  bool has_first_t_second() const;
  void clear_first_t_second();
  static const int kFirstTSecondFieldNumber = 1;
  const ::ist_slam::transform::proto::Rigid2d& first_t_second() const;
  ::ist_slam::transform::proto::Rigid2d* mutable_first_t_second();
  ::ist_slam::transform::proto::Rigid2d* release_first_t_second();
  void set_allocated_first_t_second(::ist_slam::transform::proto::Rigid2d* first_t_second);

  // double translation_weight = 2;
  void clear_translation_weight();
  static const int kTranslationWeightFieldNumber = 2;
  double translation_weight() const;
  void set_translation_weight(double value);

  // double rotation_weight = 3;
  void clear_rotation_weight();
  static const int kRotationWeightFieldNumber = 3;
  double rotation_weight() const;
  void set_rotation_weight(double value);

  // @@protoc_insertion_point(class_scope:ist_slam.pose_graph.proto.RelativePose2D.Parameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ist_slam::transform::proto::Rigid2d* first_t_second_;
  double translation_weight_;
  double rotation_weight_;
  mutable int _cached_size_;
  friend struct protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fcost_5ffunction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RelativePose2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ist_slam.pose_graph.proto.RelativePose2D) */ {
 public:
  RelativePose2D();
  virtual ~RelativePose2D();

  RelativePose2D(const RelativePose2D& from);

  inline RelativePose2D& operator=(const RelativePose2D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RelativePose2D(RelativePose2D&& from) noexcept
    : RelativePose2D() {
    *this = ::std::move(from);
  }

  inline RelativePose2D& operator=(RelativePose2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RelativePose2D& default_instance();

  static inline const RelativePose2D* internal_default_instance() {
    return reinterpret_cast<const RelativePose2D*>(
               &_RelativePose2D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RelativePose2D* other);
  friend void swap(RelativePose2D& a, RelativePose2D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RelativePose2D* New() const PROTOBUF_FINAL { return New(NULL); }

  RelativePose2D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RelativePose2D& from);
  void MergeFrom(const RelativePose2D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RelativePose2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RelativePose2D_Parameters Parameters;

  // accessors -------------------------------------------------------

  // .ist_slam.pose_graph.proto.NodeId first = 1;
  bool has_first() const;
  void clear_first();
  static const int kFirstFieldNumber = 1;
  const ::ist_slam::pose_graph::proto::NodeId& first() const;
  ::ist_slam::pose_graph::proto::NodeId* mutable_first();
  ::ist_slam::pose_graph::proto::NodeId* release_first();
  void set_allocated_first(::ist_slam::pose_graph::proto::NodeId* first);

  // .ist_slam.pose_graph.proto.NodeId second = 2;
  bool has_second() const;
  void clear_second();
  static const int kSecondFieldNumber = 2;
  const ::ist_slam::pose_graph::proto::NodeId& second() const;
  ::ist_slam::pose_graph::proto::NodeId* mutable_second();
  ::ist_slam::pose_graph::proto::NodeId* release_second();
  void set_allocated_second(::ist_slam::pose_graph::proto::NodeId* second);

  // .ist_slam.pose_graph.proto.RelativePose2D.Parameters parameters = 3;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 3;
  const ::ist_slam::pose_graph::proto::RelativePose2D_Parameters& parameters() const;
  ::ist_slam::pose_graph::proto::RelativePose2D_Parameters* mutable_parameters();
  ::ist_slam::pose_graph::proto::RelativePose2D_Parameters* release_parameters();
  void set_allocated_parameters(::ist_slam::pose_graph::proto::RelativePose2D_Parameters* parameters);

  // @@protoc_insertion_point(class_scope:ist_slam.pose_graph.proto.RelativePose2D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ist_slam::pose_graph::proto::NodeId* first_;
  ::ist_slam::pose_graph::proto::NodeId* second_;
  ::ist_slam::pose_graph::proto::RelativePose2D_Parameters* parameters_;
  mutable int _cached_size_;
  friend struct protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fcost_5ffunction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RelativePose3D_Parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ist_slam.pose_graph.proto.RelativePose3D.Parameters) */ {
 public:
  RelativePose3D_Parameters();
  virtual ~RelativePose3D_Parameters();

  RelativePose3D_Parameters(const RelativePose3D_Parameters& from);

  inline RelativePose3D_Parameters& operator=(const RelativePose3D_Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RelativePose3D_Parameters(RelativePose3D_Parameters&& from) noexcept
    : RelativePose3D_Parameters() {
    *this = ::std::move(from);
  }

  inline RelativePose3D_Parameters& operator=(RelativePose3D_Parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RelativePose3D_Parameters& default_instance();

  static inline const RelativePose3D_Parameters* internal_default_instance() {
    return reinterpret_cast<const RelativePose3D_Parameters*>(
               &_RelativePose3D_Parameters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RelativePose3D_Parameters* other);
  friend void swap(RelativePose3D_Parameters& a, RelativePose3D_Parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RelativePose3D_Parameters* New() const PROTOBUF_FINAL { return New(NULL); }

  RelativePose3D_Parameters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RelativePose3D_Parameters& from);
  void MergeFrom(const RelativePose3D_Parameters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RelativePose3D_Parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ist_slam.transform.proto.Rigid3d first_t_second = 1;
  bool has_first_t_second() const;
  void clear_first_t_second();
  static const int kFirstTSecondFieldNumber = 1;
  const ::ist_slam::transform::proto::Rigid3d& first_t_second() const;
  ::ist_slam::transform::proto::Rigid3d* mutable_first_t_second();
  ::ist_slam::transform::proto::Rigid3d* release_first_t_second();
  void set_allocated_first_t_second(::ist_slam::transform::proto::Rigid3d* first_t_second);

  // double translation_weight = 2;
  void clear_translation_weight();
  static const int kTranslationWeightFieldNumber = 2;
  double translation_weight() const;
  void set_translation_weight(double value);

  // double rotation_weight = 3;
  void clear_rotation_weight();
  static const int kRotationWeightFieldNumber = 3;
  double rotation_weight() const;
  void set_rotation_weight(double value);

  // @@protoc_insertion_point(class_scope:ist_slam.pose_graph.proto.RelativePose3D.Parameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ist_slam::transform::proto::Rigid3d* first_t_second_;
  double translation_weight_;
  double rotation_weight_;
  mutable int _cached_size_;
  friend struct protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fcost_5ffunction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RelativePose3D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ist_slam.pose_graph.proto.RelativePose3D) */ {
 public:
  RelativePose3D();
  virtual ~RelativePose3D();

  RelativePose3D(const RelativePose3D& from);

  inline RelativePose3D& operator=(const RelativePose3D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RelativePose3D(RelativePose3D&& from) noexcept
    : RelativePose3D() {
    *this = ::std::move(from);
  }

  inline RelativePose3D& operator=(RelativePose3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RelativePose3D& default_instance();

  static inline const RelativePose3D* internal_default_instance() {
    return reinterpret_cast<const RelativePose3D*>(
               &_RelativePose3D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RelativePose3D* other);
  friend void swap(RelativePose3D& a, RelativePose3D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RelativePose3D* New() const PROTOBUF_FINAL { return New(NULL); }

  RelativePose3D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RelativePose3D& from);
  void MergeFrom(const RelativePose3D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RelativePose3D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RelativePose3D_Parameters Parameters;

  // accessors -------------------------------------------------------

  // .ist_slam.pose_graph.proto.NodeId first = 1;
  bool has_first() const;
  void clear_first();
  static const int kFirstFieldNumber = 1;
  const ::ist_slam::pose_graph::proto::NodeId& first() const;
  ::ist_slam::pose_graph::proto::NodeId* mutable_first();
  ::ist_slam::pose_graph::proto::NodeId* release_first();
  void set_allocated_first(::ist_slam::pose_graph::proto::NodeId* first);

  // .ist_slam.pose_graph.proto.NodeId second = 2;
  bool has_second() const;
  void clear_second();
  static const int kSecondFieldNumber = 2;
  const ::ist_slam::pose_graph::proto::NodeId& second() const;
  ::ist_slam::pose_graph::proto::NodeId* mutable_second();
  ::ist_slam::pose_graph::proto::NodeId* release_second();
  void set_allocated_second(::ist_slam::pose_graph::proto::NodeId* second);

  // .ist_slam.pose_graph.proto.RelativePose3D.Parameters parameters = 3;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 3;
  const ::ist_slam::pose_graph::proto::RelativePose3D_Parameters& parameters() const;
  ::ist_slam::pose_graph::proto::RelativePose3D_Parameters* mutable_parameters();
  ::ist_slam::pose_graph::proto::RelativePose3D_Parameters* release_parameters();
  void set_allocated_parameters(::ist_slam::pose_graph::proto::RelativePose3D_Parameters* parameters);

  // @@protoc_insertion_point(class_scope:ist_slam.pose_graph.proto.RelativePose3D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ist_slam::pose_graph::proto::NodeId* first_;
  ::ist_slam::pose_graph::proto::NodeId* second_;
  ::ist_slam::pose_graph::proto::RelativePose3D_Parameters* parameters_;
  mutable int _cached_size_;
  friend struct protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fcost_5ffunction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Acceleration3D_Parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ist_slam.pose_graph.proto.Acceleration3D.Parameters) */ {
 public:
  Acceleration3D_Parameters();
  virtual ~Acceleration3D_Parameters();

  Acceleration3D_Parameters(const Acceleration3D_Parameters& from);

  inline Acceleration3D_Parameters& operator=(const Acceleration3D_Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Acceleration3D_Parameters(Acceleration3D_Parameters&& from) noexcept
    : Acceleration3D_Parameters() {
    *this = ::std::move(from);
  }

  inline Acceleration3D_Parameters& operator=(Acceleration3D_Parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Acceleration3D_Parameters& default_instance();

  static inline const Acceleration3D_Parameters* internal_default_instance() {
    return reinterpret_cast<const Acceleration3D_Parameters*>(
               &_Acceleration3D_Parameters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Acceleration3D_Parameters* other);
  friend void swap(Acceleration3D_Parameters& a, Acceleration3D_Parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Acceleration3D_Parameters* New() const PROTOBUF_FINAL { return New(NULL); }

  Acceleration3D_Parameters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Acceleration3D_Parameters& from);
  void MergeFrom(const Acceleration3D_Parameters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Acceleration3D_Parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ist_slam.transform.proto.Vector3d delta_velocity_imu_frame = 1;
  bool has_delta_velocity_imu_frame() const;
  void clear_delta_velocity_imu_frame();
  static const int kDeltaVelocityImuFrameFieldNumber = 1;
  const ::ist_slam::transform::proto::Vector3d& delta_velocity_imu_frame() const;
  ::ist_slam::transform::proto::Vector3d* mutable_delta_velocity_imu_frame();
  ::ist_slam::transform::proto::Vector3d* release_delta_velocity_imu_frame();
  void set_allocated_delta_velocity_imu_frame(::ist_slam::transform::proto::Vector3d* delta_velocity_imu_frame);

  // double first_to_second_delta_time_seconds = 2;
  void clear_first_to_second_delta_time_seconds();
  static const int kFirstToSecondDeltaTimeSecondsFieldNumber = 2;
  double first_to_second_delta_time_seconds() const;
  void set_first_to_second_delta_time_seconds(double value);

  // double second_to_third_delta_time_seconds = 3;
  void clear_second_to_third_delta_time_seconds();
  static const int kSecondToThirdDeltaTimeSecondsFieldNumber = 3;
  double second_to_third_delta_time_seconds() const;
  void set_second_to_third_delta_time_seconds(double value);

  // double scaling_factor = 4;
  void clear_scaling_factor();
  static const int kScalingFactorFieldNumber = 4;
  double scaling_factor() const;
  void set_scaling_factor(double value);

  // @@protoc_insertion_point(class_scope:ist_slam.pose_graph.proto.Acceleration3D.Parameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ist_slam::transform::proto::Vector3d* delta_velocity_imu_frame_;
  double first_to_second_delta_time_seconds_;
  double second_to_third_delta_time_seconds_;
  double scaling_factor_;
  mutable int _cached_size_;
  friend struct protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fcost_5ffunction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Acceleration3D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ist_slam.pose_graph.proto.Acceleration3D) */ {
 public:
  Acceleration3D();
  virtual ~Acceleration3D();

  Acceleration3D(const Acceleration3D& from);

  inline Acceleration3D& operator=(const Acceleration3D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Acceleration3D(Acceleration3D&& from) noexcept
    : Acceleration3D() {
    *this = ::std::move(from);
  }

  inline Acceleration3D& operator=(Acceleration3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Acceleration3D& default_instance();

  static inline const Acceleration3D* internal_default_instance() {
    return reinterpret_cast<const Acceleration3D*>(
               &_Acceleration3D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Acceleration3D* other);
  friend void swap(Acceleration3D& a, Acceleration3D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Acceleration3D* New() const PROTOBUF_FINAL { return New(NULL); }

  Acceleration3D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Acceleration3D& from);
  void MergeFrom(const Acceleration3D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Acceleration3D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Acceleration3D_Parameters Parameters;

  // accessors -------------------------------------------------------

  // .ist_slam.pose_graph.proto.NodeId first = 1;
  bool has_first() const;
  void clear_first();
  static const int kFirstFieldNumber = 1;
  const ::ist_slam::pose_graph::proto::NodeId& first() const;
  ::ist_slam::pose_graph::proto::NodeId* mutable_first();
  ::ist_slam::pose_graph::proto::NodeId* release_first();
  void set_allocated_first(::ist_slam::pose_graph::proto::NodeId* first);

  // .ist_slam.pose_graph.proto.NodeId second = 2;
  bool has_second() const;
  void clear_second();
  static const int kSecondFieldNumber = 2;
  const ::ist_slam::pose_graph::proto::NodeId& second() const;
  ::ist_slam::pose_graph::proto::NodeId* mutable_second();
  ::ist_slam::pose_graph::proto::NodeId* release_second();
  void set_allocated_second(::ist_slam::pose_graph::proto::NodeId* second);

  // .ist_slam.pose_graph.proto.NodeId third = 3;
  bool has_third() const;
  void clear_third();
  static const int kThirdFieldNumber = 3;
  const ::ist_slam::pose_graph::proto::NodeId& third() const;
  ::ist_slam::pose_graph::proto::NodeId* mutable_third();
  ::ist_slam::pose_graph::proto::NodeId* release_third();
  void set_allocated_third(::ist_slam::pose_graph::proto::NodeId* third);

  // .ist_slam.pose_graph.proto.NodeId imu_calibration = 4;
  bool has_imu_calibration() const;
  void clear_imu_calibration();
  static const int kImuCalibrationFieldNumber = 4;
  const ::ist_slam::pose_graph::proto::NodeId& imu_calibration() const;
  ::ist_slam::pose_graph::proto::NodeId* mutable_imu_calibration();
  ::ist_slam::pose_graph::proto::NodeId* release_imu_calibration();
  void set_allocated_imu_calibration(::ist_slam::pose_graph::proto::NodeId* imu_calibration);

  // .ist_slam.pose_graph.proto.Acceleration3D.Parameters parameters = 5;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 5;
  const ::ist_slam::pose_graph::proto::Acceleration3D_Parameters& parameters() const;
  ::ist_slam::pose_graph::proto::Acceleration3D_Parameters* mutable_parameters();
  ::ist_slam::pose_graph::proto::Acceleration3D_Parameters* release_parameters();
  void set_allocated_parameters(::ist_slam::pose_graph::proto::Acceleration3D_Parameters* parameters);

  // @@protoc_insertion_point(class_scope:ist_slam.pose_graph.proto.Acceleration3D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ist_slam::pose_graph::proto::NodeId* first_;
  ::ist_slam::pose_graph::proto::NodeId* second_;
  ::ist_slam::pose_graph::proto::NodeId* third_;
  ::ist_slam::pose_graph::proto::NodeId* imu_calibration_;
  ::ist_slam::pose_graph::proto::Acceleration3D_Parameters* parameters_;
  mutable int _cached_size_;
  friend struct protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fcost_5ffunction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Rotation3D_Parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ist_slam.pose_graph.proto.Rotation3D.Parameters) */ {
 public:
  Rotation3D_Parameters();
  virtual ~Rotation3D_Parameters();

  Rotation3D_Parameters(const Rotation3D_Parameters& from);

  inline Rotation3D_Parameters& operator=(const Rotation3D_Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rotation3D_Parameters(Rotation3D_Parameters&& from) noexcept
    : Rotation3D_Parameters() {
    *this = ::std::move(from);
  }

  inline Rotation3D_Parameters& operator=(Rotation3D_Parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rotation3D_Parameters& default_instance();

  static inline const Rotation3D_Parameters* internal_default_instance() {
    return reinterpret_cast<const Rotation3D_Parameters*>(
               &_Rotation3D_Parameters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Rotation3D_Parameters* other);
  friend void swap(Rotation3D_Parameters& a, Rotation3D_Parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rotation3D_Parameters* New() const PROTOBUF_FINAL { return New(NULL); }

  Rotation3D_Parameters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Rotation3D_Parameters& from);
  void MergeFrom(const Rotation3D_Parameters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Rotation3D_Parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ist_slam.transform.proto.Quaterniond delta_rotation_imu_frame = 1;
  bool has_delta_rotation_imu_frame() const;
  void clear_delta_rotation_imu_frame();
  static const int kDeltaRotationImuFrameFieldNumber = 1;
  const ::ist_slam::transform::proto::Quaterniond& delta_rotation_imu_frame() const;
  ::ist_slam::transform::proto::Quaterniond* mutable_delta_rotation_imu_frame();
  ::ist_slam::transform::proto::Quaterniond* release_delta_rotation_imu_frame();
  void set_allocated_delta_rotation_imu_frame(::ist_slam::transform::proto::Quaterniond* delta_rotation_imu_frame);

  // double scaling_factor = 2;
  void clear_scaling_factor();
  static const int kScalingFactorFieldNumber = 2;
  double scaling_factor() const;
  void set_scaling_factor(double value);

  // @@protoc_insertion_point(class_scope:ist_slam.pose_graph.proto.Rotation3D.Parameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ist_slam::transform::proto::Quaterniond* delta_rotation_imu_frame_;
  double scaling_factor_;
  mutable int _cached_size_;
  friend struct protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fcost_5ffunction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Rotation3D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ist_slam.pose_graph.proto.Rotation3D) */ {
 public:
  Rotation3D();
  virtual ~Rotation3D();

  Rotation3D(const Rotation3D& from);

  inline Rotation3D& operator=(const Rotation3D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rotation3D(Rotation3D&& from) noexcept
    : Rotation3D() {
    *this = ::std::move(from);
  }

  inline Rotation3D& operator=(Rotation3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rotation3D& default_instance();

  static inline const Rotation3D* internal_default_instance() {
    return reinterpret_cast<const Rotation3D*>(
               &_Rotation3D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Rotation3D* other);
  friend void swap(Rotation3D& a, Rotation3D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rotation3D* New() const PROTOBUF_FINAL { return New(NULL); }

  Rotation3D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Rotation3D& from);
  void MergeFrom(const Rotation3D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Rotation3D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Rotation3D_Parameters Parameters;

  // accessors -------------------------------------------------------

  // .ist_slam.pose_graph.proto.NodeId first = 1;
  bool has_first() const;
  void clear_first();
  static const int kFirstFieldNumber = 1;
  const ::ist_slam::pose_graph::proto::NodeId& first() const;
  ::ist_slam::pose_graph::proto::NodeId* mutable_first();
  ::ist_slam::pose_graph::proto::NodeId* release_first();
  void set_allocated_first(::ist_slam::pose_graph::proto::NodeId* first);

  // .ist_slam.pose_graph.proto.NodeId second = 2;
  bool has_second() const;
  void clear_second();
  static const int kSecondFieldNumber = 2;
  const ::ist_slam::pose_graph::proto::NodeId& second() const;
  ::ist_slam::pose_graph::proto::NodeId* mutable_second();
  ::ist_slam::pose_graph::proto::NodeId* release_second();
  void set_allocated_second(::ist_slam::pose_graph::proto::NodeId* second);

  // .ist_slam.pose_graph.proto.NodeId imu_calibration = 3;
  bool has_imu_calibration() const;
  void clear_imu_calibration();
  static const int kImuCalibrationFieldNumber = 3;
  const ::ist_slam::pose_graph::proto::NodeId& imu_calibration() const;
  ::ist_slam::pose_graph::proto::NodeId* mutable_imu_calibration();
  ::ist_slam::pose_graph::proto::NodeId* release_imu_calibration();
  void set_allocated_imu_calibration(::ist_slam::pose_graph::proto::NodeId* imu_calibration);

  // .ist_slam.pose_graph.proto.Rotation3D.Parameters parameters = 4;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 4;
  const ::ist_slam::pose_graph::proto::Rotation3D_Parameters& parameters() const;
  ::ist_slam::pose_graph::proto::Rotation3D_Parameters* mutable_parameters();
  ::ist_slam::pose_graph::proto::Rotation3D_Parameters* release_parameters();
  void set_allocated_parameters(::ist_slam::pose_graph::proto::Rotation3D_Parameters* parameters);

  // @@protoc_insertion_point(class_scope:ist_slam.pose_graph.proto.Rotation3D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ist_slam::pose_graph::proto::NodeId* first_;
  ::ist_slam::pose_graph::proto::NodeId* second_;
  ::ist_slam::pose_graph::proto::NodeId* imu_calibration_;
  ::ist_slam::pose_graph::proto::Rotation3D_Parameters* parameters_;
  mutable int _cached_size_;
  friend struct protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fcost_5ffunction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InterpolatedRelativePose2D_Parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters) */ {
 public:
  InterpolatedRelativePose2D_Parameters();
  virtual ~InterpolatedRelativePose2D_Parameters();

  InterpolatedRelativePose2D_Parameters(const InterpolatedRelativePose2D_Parameters& from);

  inline InterpolatedRelativePose2D_Parameters& operator=(const InterpolatedRelativePose2D_Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InterpolatedRelativePose2D_Parameters(InterpolatedRelativePose2D_Parameters&& from) noexcept
    : InterpolatedRelativePose2D_Parameters() {
    *this = ::std::move(from);
  }

  inline InterpolatedRelativePose2D_Parameters& operator=(InterpolatedRelativePose2D_Parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InterpolatedRelativePose2D_Parameters& default_instance();

  static inline const InterpolatedRelativePose2D_Parameters* internal_default_instance() {
    return reinterpret_cast<const InterpolatedRelativePose2D_Parameters*>(
               &_InterpolatedRelativePose2D_Parameters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(InterpolatedRelativePose2D_Parameters* other);
  friend void swap(InterpolatedRelativePose2D_Parameters& a, InterpolatedRelativePose2D_Parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InterpolatedRelativePose2D_Parameters* New() const PROTOBUF_FINAL { return New(NULL); }

  InterpolatedRelativePose2D_Parameters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InterpolatedRelativePose2D_Parameters& from);
  void MergeFrom(const InterpolatedRelativePose2D_Parameters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InterpolatedRelativePose2D_Parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ist_slam.transform.proto.Rigid3d first_t_second = 1;
  bool has_first_t_second() const;
  void clear_first_t_second();
  static const int kFirstTSecondFieldNumber = 1;
  const ::ist_slam::transform::proto::Rigid3d& first_t_second() const;
  ::ist_slam::transform::proto::Rigid3d* mutable_first_t_second();
  ::ist_slam::transform::proto::Rigid3d* release_first_t_second();
  void set_allocated_first_t_second(::ist_slam::transform::proto::Rigid3d* first_t_second);

  // .ist_slam.transform.proto.Quaterniond gravity_alignment_first_start = 4;
  bool has_gravity_alignment_first_start() const;
  void clear_gravity_alignment_first_start();
  static const int kGravityAlignmentFirstStartFieldNumber = 4;
  const ::ist_slam::transform::proto::Quaterniond& gravity_alignment_first_start() const;
  ::ist_slam::transform::proto::Quaterniond* mutable_gravity_alignment_first_start();
  ::ist_slam::transform::proto::Quaterniond* release_gravity_alignment_first_start();
  void set_allocated_gravity_alignment_first_start(::ist_slam::transform::proto::Quaterniond* gravity_alignment_first_start);

  // .ist_slam.transform.proto.Quaterniond gravity_alignment_first_end = 5;
  bool has_gravity_alignment_first_end() const;
  void clear_gravity_alignment_first_end();
  static const int kGravityAlignmentFirstEndFieldNumber = 5;
  const ::ist_slam::transform::proto::Quaterniond& gravity_alignment_first_end() const;
  ::ist_slam::transform::proto::Quaterniond* mutable_gravity_alignment_first_end();
  ::ist_slam::transform::proto::Quaterniond* release_gravity_alignment_first_end();
  void set_allocated_gravity_alignment_first_end(::ist_slam::transform::proto::Quaterniond* gravity_alignment_first_end);

  // double translation_weight = 2;
  void clear_translation_weight();
  static const int kTranslationWeightFieldNumber = 2;
  double translation_weight() const;
  void set_translation_weight(double value);

  // double rotation_weight = 3;
  void clear_rotation_weight();
  static const int kRotationWeightFieldNumber = 3;
  double rotation_weight() const;
  void set_rotation_weight(double value);

  // double interpolation_factor = 6;
  void clear_interpolation_factor();
  static const int kInterpolationFactorFieldNumber = 6;
  double interpolation_factor() const;
  void set_interpolation_factor(double value);

  // @@protoc_insertion_point(class_scope:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ist_slam::transform::proto::Rigid3d* first_t_second_;
  ::ist_slam::transform::proto::Quaterniond* gravity_alignment_first_start_;
  ::ist_slam::transform::proto::Quaterniond* gravity_alignment_first_end_;
  double translation_weight_;
  double rotation_weight_;
  double interpolation_factor_;
  mutable int _cached_size_;
  friend struct protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fcost_5ffunction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InterpolatedRelativePose2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ist_slam.pose_graph.proto.InterpolatedRelativePose2D) */ {
 public:
  InterpolatedRelativePose2D();
  virtual ~InterpolatedRelativePose2D();

  InterpolatedRelativePose2D(const InterpolatedRelativePose2D& from);

  inline InterpolatedRelativePose2D& operator=(const InterpolatedRelativePose2D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InterpolatedRelativePose2D(InterpolatedRelativePose2D&& from) noexcept
    : InterpolatedRelativePose2D() {
    *this = ::std::move(from);
  }

  inline InterpolatedRelativePose2D& operator=(InterpolatedRelativePose2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InterpolatedRelativePose2D& default_instance();

  static inline const InterpolatedRelativePose2D* internal_default_instance() {
    return reinterpret_cast<const InterpolatedRelativePose2D*>(
               &_InterpolatedRelativePose2D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(InterpolatedRelativePose2D* other);
  friend void swap(InterpolatedRelativePose2D& a, InterpolatedRelativePose2D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InterpolatedRelativePose2D* New() const PROTOBUF_FINAL { return New(NULL); }

  InterpolatedRelativePose2D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InterpolatedRelativePose2D& from);
  void MergeFrom(const InterpolatedRelativePose2D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InterpolatedRelativePose2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef InterpolatedRelativePose2D_Parameters Parameters;

  // accessors -------------------------------------------------------

  // .ist_slam.pose_graph.proto.NodeId first_start = 1;
  bool has_first_start() const;
  void clear_first_start();
  static const int kFirstStartFieldNumber = 1;
  const ::ist_slam::pose_graph::proto::NodeId& first_start() const;
  ::ist_slam::pose_graph::proto::NodeId* mutable_first_start();
  ::ist_slam::pose_graph::proto::NodeId* release_first_start();
  void set_allocated_first_start(::ist_slam::pose_graph::proto::NodeId* first_start);

  // .ist_slam.pose_graph.proto.NodeId first_end = 2;
  bool has_first_end() const;
  void clear_first_end();
  static const int kFirstEndFieldNumber = 2;
  const ::ist_slam::pose_graph::proto::NodeId& first_end() const;
  ::ist_slam::pose_graph::proto::NodeId* mutable_first_end();
  ::ist_slam::pose_graph::proto::NodeId* release_first_end();
  void set_allocated_first_end(::ist_slam::pose_graph::proto::NodeId* first_end);

  // .ist_slam.pose_graph.proto.NodeId second = 3;
  bool has_second() const;
  void clear_second();
  static const int kSecondFieldNumber = 3;
  const ::ist_slam::pose_graph::proto::NodeId& second() const;
  ::ist_slam::pose_graph::proto::NodeId* mutable_second();
  ::ist_slam::pose_graph::proto::NodeId* release_second();
  void set_allocated_second(::ist_slam::pose_graph::proto::NodeId* second);

  // .ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters parameters = 4;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 4;
  const ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D_Parameters& parameters() const;
  ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D_Parameters* mutable_parameters();
  ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D_Parameters* release_parameters();
  void set_allocated_parameters(::ist_slam::pose_graph::proto::InterpolatedRelativePose2D_Parameters* parameters);

  // @@protoc_insertion_point(class_scope:ist_slam.pose_graph.proto.InterpolatedRelativePose2D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ist_slam::pose_graph::proto::NodeId* first_start_;
  ::ist_slam::pose_graph::proto::NodeId* first_end_;
  ::ist_slam::pose_graph::proto::NodeId* second_;
  ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D_Parameters* parameters_;
  mutable int _cached_size_;
  friend struct protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fcost_5ffunction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InterpolatedRelativePose3D_Parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.Parameters) */ {
 public:
  InterpolatedRelativePose3D_Parameters();
  virtual ~InterpolatedRelativePose3D_Parameters();

  InterpolatedRelativePose3D_Parameters(const InterpolatedRelativePose3D_Parameters& from);

  inline InterpolatedRelativePose3D_Parameters& operator=(const InterpolatedRelativePose3D_Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InterpolatedRelativePose3D_Parameters(InterpolatedRelativePose3D_Parameters&& from) noexcept
    : InterpolatedRelativePose3D_Parameters() {
    *this = ::std::move(from);
  }

  inline InterpolatedRelativePose3D_Parameters& operator=(InterpolatedRelativePose3D_Parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InterpolatedRelativePose3D_Parameters& default_instance();

  static inline const InterpolatedRelativePose3D_Parameters* internal_default_instance() {
    return reinterpret_cast<const InterpolatedRelativePose3D_Parameters*>(
               &_InterpolatedRelativePose3D_Parameters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(InterpolatedRelativePose3D_Parameters* other);
  friend void swap(InterpolatedRelativePose3D_Parameters& a, InterpolatedRelativePose3D_Parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InterpolatedRelativePose3D_Parameters* New() const PROTOBUF_FINAL { return New(NULL); }

  InterpolatedRelativePose3D_Parameters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InterpolatedRelativePose3D_Parameters& from);
  void MergeFrom(const InterpolatedRelativePose3D_Parameters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InterpolatedRelativePose3D_Parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ist_slam.transform.proto.Rigid3d first_t_second = 1;
  bool has_first_t_second() const;
  void clear_first_t_second();
  static const int kFirstTSecondFieldNumber = 1;
  const ::ist_slam::transform::proto::Rigid3d& first_t_second() const;
  ::ist_slam::transform::proto::Rigid3d* mutable_first_t_second();
  ::ist_slam::transform::proto::Rigid3d* release_first_t_second();
  void set_allocated_first_t_second(::ist_slam::transform::proto::Rigid3d* first_t_second);

  // double translation_weight = 2;
  void clear_translation_weight();
  static const int kTranslationWeightFieldNumber = 2;
  double translation_weight() const;
  void set_translation_weight(double value);

  // double rotation_weight = 3;
  void clear_rotation_weight();
  static const int kRotationWeightFieldNumber = 3;
  double rotation_weight() const;
  void set_rotation_weight(double value);

  // double interpolation_factor = 4;
  void clear_interpolation_factor();
  static const int kInterpolationFactorFieldNumber = 4;
  double interpolation_factor() const;
  void set_interpolation_factor(double value);

  // @@protoc_insertion_point(class_scope:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.Parameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ist_slam::transform::proto::Rigid3d* first_t_second_;
  double translation_weight_;
  double rotation_weight_;
  double interpolation_factor_;
  mutable int _cached_size_;
  friend struct protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fcost_5ffunction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InterpolatedRelativePose3D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ist_slam.pose_graph.proto.InterpolatedRelativePose3D) */ {
 public:
  InterpolatedRelativePose3D();
  virtual ~InterpolatedRelativePose3D();

  InterpolatedRelativePose3D(const InterpolatedRelativePose3D& from);

  inline InterpolatedRelativePose3D& operator=(const InterpolatedRelativePose3D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InterpolatedRelativePose3D(InterpolatedRelativePose3D&& from) noexcept
    : InterpolatedRelativePose3D() {
    *this = ::std::move(from);
  }

  inline InterpolatedRelativePose3D& operator=(InterpolatedRelativePose3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InterpolatedRelativePose3D& default_instance();

  static inline const InterpolatedRelativePose3D* internal_default_instance() {
    return reinterpret_cast<const InterpolatedRelativePose3D*>(
               &_InterpolatedRelativePose3D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(InterpolatedRelativePose3D* other);
  friend void swap(InterpolatedRelativePose3D& a, InterpolatedRelativePose3D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InterpolatedRelativePose3D* New() const PROTOBUF_FINAL { return New(NULL); }

  InterpolatedRelativePose3D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InterpolatedRelativePose3D& from);
  void MergeFrom(const InterpolatedRelativePose3D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InterpolatedRelativePose3D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef InterpolatedRelativePose3D_Parameters Parameters;

  // accessors -------------------------------------------------------

  // .ist_slam.pose_graph.proto.NodeId first_start = 1;
  bool has_first_start() const;
  void clear_first_start();
  static const int kFirstStartFieldNumber = 1;
  const ::ist_slam::pose_graph::proto::NodeId& first_start() const;
  ::ist_slam::pose_graph::proto::NodeId* mutable_first_start();
  ::ist_slam::pose_graph::proto::NodeId* release_first_start();
  void set_allocated_first_start(::ist_slam::pose_graph::proto::NodeId* first_start);

  // .ist_slam.pose_graph.proto.NodeId first_end = 2;
  bool has_first_end() const;
  void clear_first_end();
  static const int kFirstEndFieldNumber = 2;
  const ::ist_slam::pose_graph::proto::NodeId& first_end() const;
  ::ist_slam::pose_graph::proto::NodeId* mutable_first_end();
  ::ist_slam::pose_graph::proto::NodeId* release_first_end();
  void set_allocated_first_end(::ist_slam::pose_graph::proto::NodeId* first_end);

  // .ist_slam.pose_graph.proto.NodeId second = 3;
  bool has_second() const;
  void clear_second();
  static const int kSecondFieldNumber = 3;
  const ::ist_slam::pose_graph::proto::NodeId& second() const;
  ::ist_slam::pose_graph::proto::NodeId* mutable_second();
  ::ist_slam::pose_graph::proto::NodeId* release_second();
  void set_allocated_second(::ist_slam::pose_graph::proto::NodeId* second);

  // .ist_slam.pose_graph.proto.InterpolatedRelativePose3D.Parameters parameters = 4;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 4;
  const ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D_Parameters& parameters() const;
  ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D_Parameters* mutable_parameters();
  ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D_Parameters* release_parameters();
  void set_allocated_parameters(::ist_slam::pose_graph::proto::InterpolatedRelativePose3D_Parameters* parameters);

  // @@protoc_insertion_point(class_scope:ist_slam.pose_graph.proto.InterpolatedRelativePose3D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ist_slam::pose_graph::proto::NodeId* first_start_;
  ::ist_slam::pose_graph::proto::NodeId* first_end_;
  ::ist_slam::pose_graph::proto::NodeId* second_;
  ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D_Parameters* parameters_;
  mutable int _cached_size_;
  friend struct protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fcost_5ffunction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CostFunction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ist_slam.pose_graph.proto.CostFunction) */ {
 public:
  CostFunction();
  virtual ~CostFunction();

  CostFunction(const CostFunction& from);

  inline CostFunction& operator=(const CostFunction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CostFunction(CostFunction&& from) noexcept
    : CostFunction() {
    *this = ::std::move(from);
  }

  inline CostFunction& operator=(CostFunction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CostFunction& default_instance();

  enum TypeCase {
    kRelativePose2D = 1,
    kRelativePose3D = 2,
    kAcceleration3D = 3,
    kRotation3D = 4,
    kInterpolatedRelativePose2D = 5,
    kInterpolatedRelativePose3D = 6,
    TYPE_NOT_SET = 0,
  };

  static inline const CostFunction* internal_default_instance() {
    return reinterpret_cast<const CostFunction*>(
               &_CostFunction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(CostFunction* other);
  friend void swap(CostFunction& a, CostFunction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CostFunction* New() const PROTOBUF_FINAL { return New(NULL); }

  CostFunction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CostFunction& from);
  void MergeFrom(const CostFunction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CostFunction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ist_slam.pose_graph.proto.RelativePose2D relative_pose_2d = 1;
  bool has_relative_pose_2d() const;
  void clear_relative_pose_2d();
  static const int kRelativePose2DFieldNumber = 1;
  const ::ist_slam::pose_graph::proto::RelativePose2D& relative_pose_2d() const;
  ::ist_slam::pose_graph::proto::RelativePose2D* mutable_relative_pose_2d();
  ::ist_slam::pose_graph::proto::RelativePose2D* release_relative_pose_2d();
  void set_allocated_relative_pose_2d(::ist_slam::pose_graph::proto::RelativePose2D* relative_pose_2d);

  // .ist_slam.pose_graph.proto.RelativePose3D relative_pose_3d = 2;
  bool has_relative_pose_3d() const;
  void clear_relative_pose_3d();
  static const int kRelativePose3DFieldNumber = 2;
  const ::ist_slam::pose_graph::proto::RelativePose3D& relative_pose_3d() const;
  ::ist_slam::pose_graph::proto::RelativePose3D* mutable_relative_pose_3d();
  ::ist_slam::pose_graph::proto::RelativePose3D* release_relative_pose_3d();
  void set_allocated_relative_pose_3d(::ist_slam::pose_graph::proto::RelativePose3D* relative_pose_3d);

  // .ist_slam.pose_graph.proto.Acceleration3D acceleration_3d = 3;
  bool has_acceleration_3d() const;
  void clear_acceleration_3d();
  static const int kAcceleration3DFieldNumber = 3;
  const ::ist_slam::pose_graph::proto::Acceleration3D& acceleration_3d() const;
  ::ist_slam::pose_graph::proto::Acceleration3D* mutable_acceleration_3d();
  ::ist_slam::pose_graph::proto::Acceleration3D* release_acceleration_3d();
  void set_allocated_acceleration_3d(::ist_slam::pose_graph::proto::Acceleration3D* acceleration_3d);

  // .ist_slam.pose_graph.proto.Rotation3D rotation_3d = 4;
  bool has_rotation_3d() const;
  void clear_rotation_3d();
  static const int kRotation3DFieldNumber = 4;
  const ::ist_slam::pose_graph::proto::Rotation3D& rotation_3d() const;
  ::ist_slam::pose_graph::proto::Rotation3D* mutable_rotation_3d();
  ::ist_slam::pose_graph::proto::Rotation3D* release_rotation_3d();
  void set_allocated_rotation_3d(::ist_slam::pose_graph::proto::Rotation3D* rotation_3d);

  // .ist_slam.pose_graph.proto.InterpolatedRelativePose2D interpolated_relative_pose_2d = 5;
  bool has_interpolated_relative_pose_2d() const;
  void clear_interpolated_relative_pose_2d();
  static const int kInterpolatedRelativePose2DFieldNumber = 5;
  const ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D& interpolated_relative_pose_2d() const;
  ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D* mutable_interpolated_relative_pose_2d();
  ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D* release_interpolated_relative_pose_2d();
  void set_allocated_interpolated_relative_pose_2d(::ist_slam::pose_graph::proto::InterpolatedRelativePose2D* interpolated_relative_pose_2d);

  // .ist_slam.pose_graph.proto.InterpolatedRelativePose3D interpolated_relative_pose_3d = 6;
  bool has_interpolated_relative_pose_3d() const;
  void clear_interpolated_relative_pose_3d();
  static const int kInterpolatedRelativePose3DFieldNumber = 6;
  const ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D& interpolated_relative_pose_3d() const;
  ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D* mutable_interpolated_relative_pose_3d();
  ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D* release_interpolated_relative_pose_3d();
  void set_allocated_interpolated_relative_pose_3d(::ist_slam::pose_graph::proto::InterpolatedRelativePose3D* interpolated_relative_pose_3d);

  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:ist_slam.pose_graph.proto.CostFunction)
 private:
  void set_has_relative_pose_2d();
  void set_has_relative_pose_3d();
  void set_has_acceleration_3d();
  void set_has_rotation_3d();
  void set_has_interpolated_relative_pose_2d();
  void set_has_interpolated_relative_pose_3d();

  inline bool has_type() const;
  void clear_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::ist_slam::pose_graph::proto::RelativePose2D* relative_pose_2d_;
    ::ist_slam::pose_graph::proto::RelativePose3D* relative_pose_3d_;
    ::ist_slam::pose_graph::proto::Acceleration3D* acceleration_3d_;
    ::ist_slam::pose_graph::proto::Rotation3D* rotation_3d_;
    ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D* interpolated_relative_pose_2d_;
    ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D* interpolated_relative_pose_3d_;
  } type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_ist_5fslam_2fpose_5fgraph_2fproto_2fcost_5ffunction_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RelativePose2D_Parameters

// .ist_slam.transform.proto.Rigid2d first_t_second = 1;
inline bool RelativePose2D_Parameters::has_first_t_second() const {
  return this != internal_default_instance() && first_t_second_ != NULL;
}
inline void RelativePose2D_Parameters::clear_first_t_second() {
  if (GetArenaNoVirtual() == NULL && first_t_second_ != NULL) delete first_t_second_;
  first_t_second_ = NULL;
}
inline const ::ist_slam::transform::proto::Rigid2d& RelativePose2D_Parameters::first_t_second() const {
  const ::ist_slam::transform::proto::Rigid2d* p = first_t_second_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.RelativePose2D.Parameters.first_t_second)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::transform::proto::Rigid2d*>(
      &::ist_slam::transform::proto::_Rigid2d_default_instance_);
}
inline ::ist_slam::transform::proto::Rigid2d* RelativePose2D_Parameters::mutable_first_t_second() {
  
  if (first_t_second_ == NULL) {
    first_t_second_ = new ::ist_slam::transform::proto::Rigid2d;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.RelativePose2D.Parameters.first_t_second)
  return first_t_second_;
}
inline ::ist_slam::transform::proto::Rigid2d* RelativePose2D_Parameters::release_first_t_second() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.RelativePose2D.Parameters.first_t_second)
  
  ::ist_slam::transform::proto::Rigid2d* temp = first_t_second_;
  first_t_second_ = NULL;
  return temp;
}
inline void RelativePose2D_Parameters::set_allocated_first_t_second(::ist_slam::transform::proto::Rigid2d* first_t_second) {
  delete first_t_second_;
  first_t_second_ = first_t_second;
  if (first_t_second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.RelativePose2D.Parameters.first_t_second)
}

// double translation_weight = 2;
inline void RelativePose2D_Parameters::clear_translation_weight() {
  translation_weight_ = 0;
}
inline double RelativePose2D_Parameters::translation_weight() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.RelativePose2D.Parameters.translation_weight)
  return translation_weight_;
}
inline void RelativePose2D_Parameters::set_translation_weight(double value) {
  
  translation_weight_ = value;
  // @@protoc_insertion_point(field_set:ist_slam.pose_graph.proto.RelativePose2D.Parameters.translation_weight)
}

// double rotation_weight = 3;
inline void RelativePose2D_Parameters::clear_rotation_weight() {
  rotation_weight_ = 0;
}
inline double RelativePose2D_Parameters::rotation_weight() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.RelativePose2D.Parameters.rotation_weight)
  return rotation_weight_;
}
inline void RelativePose2D_Parameters::set_rotation_weight(double value) {
  
  rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:ist_slam.pose_graph.proto.RelativePose2D.Parameters.rotation_weight)
}

// -------------------------------------------------------------------

// RelativePose2D

// .ist_slam.pose_graph.proto.NodeId first = 1;
inline bool RelativePose2D::has_first() const {
  return this != internal_default_instance() && first_ != NULL;
}
inline void RelativePose2D::clear_first() {
  if (GetArenaNoVirtual() == NULL && first_ != NULL) delete first_;
  first_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::NodeId& RelativePose2D::first() const {
  const ::ist_slam::pose_graph::proto::NodeId* p = first_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.RelativePose2D.first)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::NodeId*>(
      &::ist_slam::pose_graph::proto::_NodeId_default_instance_);
}
inline ::ist_slam::pose_graph::proto::NodeId* RelativePose2D::mutable_first() {
  
  if (first_ == NULL) {
    first_ = new ::ist_slam::pose_graph::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.RelativePose2D.first)
  return first_;
}
inline ::ist_slam::pose_graph::proto::NodeId* RelativePose2D::release_first() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.RelativePose2D.first)
  
  ::ist_slam::pose_graph::proto::NodeId* temp = first_;
  first_ = NULL;
  return temp;
}
inline void RelativePose2D::set_allocated_first(::ist_slam::pose_graph::proto::NodeId* first) {
  delete first_;
  first_ = first;
  if (first) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.RelativePose2D.first)
}

// .ist_slam.pose_graph.proto.NodeId second = 2;
inline bool RelativePose2D::has_second() const {
  return this != internal_default_instance() && second_ != NULL;
}
inline void RelativePose2D::clear_second() {
  if (GetArenaNoVirtual() == NULL && second_ != NULL) delete second_;
  second_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::NodeId& RelativePose2D::second() const {
  const ::ist_slam::pose_graph::proto::NodeId* p = second_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.RelativePose2D.second)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::NodeId*>(
      &::ist_slam::pose_graph::proto::_NodeId_default_instance_);
}
inline ::ist_slam::pose_graph::proto::NodeId* RelativePose2D::mutable_second() {
  
  if (second_ == NULL) {
    second_ = new ::ist_slam::pose_graph::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.RelativePose2D.second)
  return second_;
}
inline ::ist_slam::pose_graph::proto::NodeId* RelativePose2D::release_second() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.RelativePose2D.second)
  
  ::ist_slam::pose_graph::proto::NodeId* temp = second_;
  second_ = NULL;
  return temp;
}
inline void RelativePose2D::set_allocated_second(::ist_slam::pose_graph::proto::NodeId* second) {
  delete second_;
  second_ = second;
  if (second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.RelativePose2D.second)
}

// .ist_slam.pose_graph.proto.RelativePose2D.Parameters parameters = 3;
inline bool RelativePose2D::has_parameters() const {
  return this != internal_default_instance() && parameters_ != NULL;
}
inline void RelativePose2D::clear_parameters() {
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) delete parameters_;
  parameters_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::RelativePose2D_Parameters& RelativePose2D::parameters() const {
  const ::ist_slam::pose_graph::proto::RelativePose2D_Parameters* p = parameters_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.RelativePose2D.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::RelativePose2D_Parameters*>(
      &::ist_slam::pose_graph::proto::_RelativePose2D_Parameters_default_instance_);
}
inline ::ist_slam::pose_graph::proto::RelativePose2D_Parameters* RelativePose2D::mutable_parameters() {
  
  if (parameters_ == NULL) {
    parameters_ = new ::ist_slam::pose_graph::proto::RelativePose2D_Parameters;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.RelativePose2D.parameters)
  return parameters_;
}
inline ::ist_slam::pose_graph::proto::RelativePose2D_Parameters* RelativePose2D::release_parameters() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.RelativePose2D.parameters)
  
  ::ist_slam::pose_graph::proto::RelativePose2D_Parameters* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline void RelativePose2D::set_allocated_parameters(::ist_slam::pose_graph::proto::RelativePose2D_Parameters* parameters) {
  delete parameters_;
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.RelativePose2D.parameters)
}

// -------------------------------------------------------------------

// RelativePose3D_Parameters

// .ist_slam.transform.proto.Rigid3d first_t_second = 1;
inline bool RelativePose3D_Parameters::has_first_t_second() const {
  return this != internal_default_instance() && first_t_second_ != NULL;
}
inline void RelativePose3D_Parameters::clear_first_t_second() {
  if (GetArenaNoVirtual() == NULL && first_t_second_ != NULL) delete first_t_second_;
  first_t_second_ = NULL;
}
inline const ::ist_slam::transform::proto::Rigid3d& RelativePose3D_Parameters::first_t_second() const {
  const ::ist_slam::transform::proto::Rigid3d* p = first_t_second_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.RelativePose3D.Parameters.first_t_second)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::transform::proto::Rigid3d*>(
      &::ist_slam::transform::proto::_Rigid3d_default_instance_);
}
inline ::ist_slam::transform::proto::Rigid3d* RelativePose3D_Parameters::mutable_first_t_second() {
  
  if (first_t_second_ == NULL) {
    first_t_second_ = new ::ist_slam::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.RelativePose3D.Parameters.first_t_second)
  return first_t_second_;
}
inline ::ist_slam::transform::proto::Rigid3d* RelativePose3D_Parameters::release_first_t_second() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.RelativePose3D.Parameters.first_t_second)
  
  ::ist_slam::transform::proto::Rigid3d* temp = first_t_second_;
  first_t_second_ = NULL;
  return temp;
}
inline void RelativePose3D_Parameters::set_allocated_first_t_second(::ist_slam::transform::proto::Rigid3d* first_t_second) {
  delete first_t_second_;
  first_t_second_ = first_t_second;
  if (first_t_second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.RelativePose3D.Parameters.first_t_second)
}

// double translation_weight = 2;
inline void RelativePose3D_Parameters::clear_translation_weight() {
  translation_weight_ = 0;
}
inline double RelativePose3D_Parameters::translation_weight() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.RelativePose3D.Parameters.translation_weight)
  return translation_weight_;
}
inline void RelativePose3D_Parameters::set_translation_weight(double value) {
  
  translation_weight_ = value;
  // @@protoc_insertion_point(field_set:ist_slam.pose_graph.proto.RelativePose3D.Parameters.translation_weight)
}

// double rotation_weight = 3;
inline void RelativePose3D_Parameters::clear_rotation_weight() {
  rotation_weight_ = 0;
}
inline double RelativePose3D_Parameters::rotation_weight() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.RelativePose3D.Parameters.rotation_weight)
  return rotation_weight_;
}
inline void RelativePose3D_Parameters::set_rotation_weight(double value) {
  
  rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:ist_slam.pose_graph.proto.RelativePose3D.Parameters.rotation_weight)
}

// -------------------------------------------------------------------

// RelativePose3D

// .ist_slam.pose_graph.proto.NodeId first = 1;
inline bool RelativePose3D::has_first() const {
  return this != internal_default_instance() && first_ != NULL;
}
inline void RelativePose3D::clear_first() {
  if (GetArenaNoVirtual() == NULL && first_ != NULL) delete first_;
  first_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::NodeId& RelativePose3D::first() const {
  const ::ist_slam::pose_graph::proto::NodeId* p = first_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.RelativePose3D.first)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::NodeId*>(
      &::ist_slam::pose_graph::proto::_NodeId_default_instance_);
}
inline ::ist_slam::pose_graph::proto::NodeId* RelativePose3D::mutable_first() {
  
  if (first_ == NULL) {
    first_ = new ::ist_slam::pose_graph::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.RelativePose3D.first)
  return first_;
}
inline ::ist_slam::pose_graph::proto::NodeId* RelativePose3D::release_first() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.RelativePose3D.first)
  
  ::ist_slam::pose_graph::proto::NodeId* temp = first_;
  first_ = NULL;
  return temp;
}
inline void RelativePose3D::set_allocated_first(::ist_slam::pose_graph::proto::NodeId* first) {
  delete first_;
  first_ = first;
  if (first) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.RelativePose3D.first)
}

// .ist_slam.pose_graph.proto.NodeId second = 2;
inline bool RelativePose3D::has_second() const {
  return this != internal_default_instance() && second_ != NULL;
}
inline void RelativePose3D::clear_second() {
  if (GetArenaNoVirtual() == NULL && second_ != NULL) delete second_;
  second_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::NodeId& RelativePose3D::second() const {
  const ::ist_slam::pose_graph::proto::NodeId* p = second_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.RelativePose3D.second)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::NodeId*>(
      &::ist_slam::pose_graph::proto::_NodeId_default_instance_);
}
inline ::ist_slam::pose_graph::proto::NodeId* RelativePose3D::mutable_second() {
  
  if (second_ == NULL) {
    second_ = new ::ist_slam::pose_graph::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.RelativePose3D.second)
  return second_;
}
inline ::ist_slam::pose_graph::proto::NodeId* RelativePose3D::release_second() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.RelativePose3D.second)
  
  ::ist_slam::pose_graph::proto::NodeId* temp = second_;
  second_ = NULL;
  return temp;
}
inline void RelativePose3D::set_allocated_second(::ist_slam::pose_graph::proto::NodeId* second) {
  delete second_;
  second_ = second;
  if (second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.RelativePose3D.second)
}

// .ist_slam.pose_graph.proto.RelativePose3D.Parameters parameters = 3;
inline bool RelativePose3D::has_parameters() const {
  return this != internal_default_instance() && parameters_ != NULL;
}
inline void RelativePose3D::clear_parameters() {
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) delete parameters_;
  parameters_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::RelativePose3D_Parameters& RelativePose3D::parameters() const {
  const ::ist_slam::pose_graph::proto::RelativePose3D_Parameters* p = parameters_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.RelativePose3D.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::RelativePose3D_Parameters*>(
      &::ist_slam::pose_graph::proto::_RelativePose3D_Parameters_default_instance_);
}
inline ::ist_slam::pose_graph::proto::RelativePose3D_Parameters* RelativePose3D::mutable_parameters() {
  
  if (parameters_ == NULL) {
    parameters_ = new ::ist_slam::pose_graph::proto::RelativePose3D_Parameters;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.RelativePose3D.parameters)
  return parameters_;
}
inline ::ist_slam::pose_graph::proto::RelativePose3D_Parameters* RelativePose3D::release_parameters() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.RelativePose3D.parameters)
  
  ::ist_slam::pose_graph::proto::RelativePose3D_Parameters* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline void RelativePose3D::set_allocated_parameters(::ist_slam::pose_graph::proto::RelativePose3D_Parameters* parameters) {
  delete parameters_;
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.RelativePose3D.parameters)
}

// -------------------------------------------------------------------

// Acceleration3D_Parameters

// .ist_slam.transform.proto.Vector3d delta_velocity_imu_frame = 1;
inline bool Acceleration3D_Parameters::has_delta_velocity_imu_frame() const {
  return this != internal_default_instance() && delta_velocity_imu_frame_ != NULL;
}
inline void Acceleration3D_Parameters::clear_delta_velocity_imu_frame() {
  if (GetArenaNoVirtual() == NULL && delta_velocity_imu_frame_ != NULL) delete delta_velocity_imu_frame_;
  delta_velocity_imu_frame_ = NULL;
}
inline const ::ist_slam::transform::proto::Vector3d& Acceleration3D_Parameters::delta_velocity_imu_frame() const {
  const ::ist_slam::transform::proto::Vector3d* p = delta_velocity_imu_frame_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.Acceleration3D.Parameters.delta_velocity_imu_frame)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::transform::proto::Vector3d*>(
      &::ist_slam::transform::proto::_Vector3d_default_instance_);
}
inline ::ist_slam::transform::proto::Vector3d* Acceleration3D_Parameters::mutable_delta_velocity_imu_frame() {
  
  if (delta_velocity_imu_frame_ == NULL) {
    delta_velocity_imu_frame_ = new ::ist_slam::transform::proto::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.Acceleration3D.Parameters.delta_velocity_imu_frame)
  return delta_velocity_imu_frame_;
}
inline ::ist_slam::transform::proto::Vector3d* Acceleration3D_Parameters::release_delta_velocity_imu_frame() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.Acceleration3D.Parameters.delta_velocity_imu_frame)
  
  ::ist_slam::transform::proto::Vector3d* temp = delta_velocity_imu_frame_;
  delta_velocity_imu_frame_ = NULL;
  return temp;
}
inline void Acceleration3D_Parameters::set_allocated_delta_velocity_imu_frame(::ist_slam::transform::proto::Vector3d* delta_velocity_imu_frame) {
  delete delta_velocity_imu_frame_;
  delta_velocity_imu_frame_ = delta_velocity_imu_frame;
  if (delta_velocity_imu_frame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.Acceleration3D.Parameters.delta_velocity_imu_frame)
}

// double first_to_second_delta_time_seconds = 2;
inline void Acceleration3D_Parameters::clear_first_to_second_delta_time_seconds() {
  first_to_second_delta_time_seconds_ = 0;
}
inline double Acceleration3D_Parameters::first_to_second_delta_time_seconds() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.Acceleration3D.Parameters.first_to_second_delta_time_seconds)
  return first_to_second_delta_time_seconds_;
}
inline void Acceleration3D_Parameters::set_first_to_second_delta_time_seconds(double value) {
  
  first_to_second_delta_time_seconds_ = value;
  // @@protoc_insertion_point(field_set:ist_slam.pose_graph.proto.Acceleration3D.Parameters.first_to_second_delta_time_seconds)
}

// double second_to_third_delta_time_seconds = 3;
inline void Acceleration3D_Parameters::clear_second_to_third_delta_time_seconds() {
  second_to_third_delta_time_seconds_ = 0;
}
inline double Acceleration3D_Parameters::second_to_third_delta_time_seconds() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.Acceleration3D.Parameters.second_to_third_delta_time_seconds)
  return second_to_third_delta_time_seconds_;
}
inline void Acceleration3D_Parameters::set_second_to_third_delta_time_seconds(double value) {
  
  second_to_third_delta_time_seconds_ = value;
  // @@protoc_insertion_point(field_set:ist_slam.pose_graph.proto.Acceleration3D.Parameters.second_to_third_delta_time_seconds)
}

// double scaling_factor = 4;
inline void Acceleration3D_Parameters::clear_scaling_factor() {
  scaling_factor_ = 0;
}
inline double Acceleration3D_Parameters::scaling_factor() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.Acceleration3D.Parameters.scaling_factor)
  return scaling_factor_;
}
inline void Acceleration3D_Parameters::set_scaling_factor(double value) {
  
  scaling_factor_ = value;
  // @@protoc_insertion_point(field_set:ist_slam.pose_graph.proto.Acceleration3D.Parameters.scaling_factor)
}

// -------------------------------------------------------------------

// Acceleration3D

// .ist_slam.pose_graph.proto.NodeId first = 1;
inline bool Acceleration3D::has_first() const {
  return this != internal_default_instance() && first_ != NULL;
}
inline void Acceleration3D::clear_first() {
  if (GetArenaNoVirtual() == NULL && first_ != NULL) delete first_;
  first_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::NodeId& Acceleration3D::first() const {
  const ::ist_slam::pose_graph::proto::NodeId* p = first_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.Acceleration3D.first)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::NodeId*>(
      &::ist_slam::pose_graph::proto::_NodeId_default_instance_);
}
inline ::ist_slam::pose_graph::proto::NodeId* Acceleration3D::mutable_first() {
  
  if (first_ == NULL) {
    first_ = new ::ist_slam::pose_graph::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.Acceleration3D.first)
  return first_;
}
inline ::ist_slam::pose_graph::proto::NodeId* Acceleration3D::release_first() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.Acceleration3D.first)
  
  ::ist_slam::pose_graph::proto::NodeId* temp = first_;
  first_ = NULL;
  return temp;
}
inline void Acceleration3D::set_allocated_first(::ist_slam::pose_graph::proto::NodeId* first) {
  delete first_;
  first_ = first;
  if (first) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.Acceleration3D.first)
}

// .ist_slam.pose_graph.proto.NodeId second = 2;
inline bool Acceleration3D::has_second() const {
  return this != internal_default_instance() && second_ != NULL;
}
inline void Acceleration3D::clear_second() {
  if (GetArenaNoVirtual() == NULL && second_ != NULL) delete second_;
  second_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::NodeId& Acceleration3D::second() const {
  const ::ist_slam::pose_graph::proto::NodeId* p = second_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.Acceleration3D.second)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::NodeId*>(
      &::ist_slam::pose_graph::proto::_NodeId_default_instance_);
}
inline ::ist_slam::pose_graph::proto::NodeId* Acceleration3D::mutable_second() {
  
  if (second_ == NULL) {
    second_ = new ::ist_slam::pose_graph::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.Acceleration3D.second)
  return second_;
}
inline ::ist_slam::pose_graph::proto::NodeId* Acceleration3D::release_second() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.Acceleration3D.second)
  
  ::ist_slam::pose_graph::proto::NodeId* temp = second_;
  second_ = NULL;
  return temp;
}
inline void Acceleration3D::set_allocated_second(::ist_slam::pose_graph::proto::NodeId* second) {
  delete second_;
  second_ = second;
  if (second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.Acceleration3D.second)
}

// .ist_slam.pose_graph.proto.NodeId third = 3;
inline bool Acceleration3D::has_third() const {
  return this != internal_default_instance() && third_ != NULL;
}
inline void Acceleration3D::clear_third() {
  if (GetArenaNoVirtual() == NULL && third_ != NULL) delete third_;
  third_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::NodeId& Acceleration3D::third() const {
  const ::ist_slam::pose_graph::proto::NodeId* p = third_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.Acceleration3D.third)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::NodeId*>(
      &::ist_slam::pose_graph::proto::_NodeId_default_instance_);
}
inline ::ist_slam::pose_graph::proto::NodeId* Acceleration3D::mutable_third() {
  
  if (third_ == NULL) {
    third_ = new ::ist_slam::pose_graph::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.Acceleration3D.third)
  return third_;
}
inline ::ist_slam::pose_graph::proto::NodeId* Acceleration3D::release_third() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.Acceleration3D.third)
  
  ::ist_slam::pose_graph::proto::NodeId* temp = third_;
  third_ = NULL;
  return temp;
}
inline void Acceleration3D::set_allocated_third(::ist_slam::pose_graph::proto::NodeId* third) {
  delete third_;
  third_ = third;
  if (third) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.Acceleration3D.third)
}

// .ist_slam.pose_graph.proto.NodeId imu_calibration = 4;
inline bool Acceleration3D::has_imu_calibration() const {
  return this != internal_default_instance() && imu_calibration_ != NULL;
}
inline void Acceleration3D::clear_imu_calibration() {
  if (GetArenaNoVirtual() == NULL && imu_calibration_ != NULL) delete imu_calibration_;
  imu_calibration_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::NodeId& Acceleration3D::imu_calibration() const {
  const ::ist_slam::pose_graph::proto::NodeId* p = imu_calibration_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.Acceleration3D.imu_calibration)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::NodeId*>(
      &::ist_slam::pose_graph::proto::_NodeId_default_instance_);
}
inline ::ist_slam::pose_graph::proto::NodeId* Acceleration3D::mutable_imu_calibration() {
  
  if (imu_calibration_ == NULL) {
    imu_calibration_ = new ::ist_slam::pose_graph::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.Acceleration3D.imu_calibration)
  return imu_calibration_;
}
inline ::ist_slam::pose_graph::proto::NodeId* Acceleration3D::release_imu_calibration() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.Acceleration3D.imu_calibration)
  
  ::ist_slam::pose_graph::proto::NodeId* temp = imu_calibration_;
  imu_calibration_ = NULL;
  return temp;
}
inline void Acceleration3D::set_allocated_imu_calibration(::ist_slam::pose_graph::proto::NodeId* imu_calibration) {
  delete imu_calibration_;
  imu_calibration_ = imu_calibration;
  if (imu_calibration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.Acceleration3D.imu_calibration)
}

// .ist_slam.pose_graph.proto.Acceleration3D.Parameters parameters = 5;
inline bool Acceleration3D::has_parameters() const {
  return this != internal_default_instance() && parameters_ != NULL;
}
inline void Acceleration3D::clear_parameters() {
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) delete parameters_;
  parameters_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::Acceleration3D_Parameters& Acceleration3D::parameters() const {
  const ::ist_slam::pose_graph::proto::Acceleration3D_Parameters* p = parameters_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.Acceleration3D.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::Acceleration3D_Parameters*>(
      &::ist_slam::pose_graph::proto::_Acceleration3D_Parameters_default_instance_);
}
inline ::ist_slam::pose_graph::proto::Acceleration3D_Parameters* Acceleration3D::mutable_parameters() {
  
  if (parameters_ == NULL) {
    parameters_ = new ::ist_slam::pose_graph::proto::Acceleration3D_Parameters;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.Acceleration3D.parameters)
  return parameters_;
}
inline ::ist_slam::pose_graph::proto::Acceleration3D_Parameters* Acceleration3D::release_parameters() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.Acceleration3D.parameters)
  
  ::ist_slam::pose_graph::proto::Acceleration3D_Parameters* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline void Acceleration3D::set_allocated_parameters(::ist_slam::pose_graph::proto::Acceleration3D_Parameters* parameters) {
  delete parameters_;
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.Acceleration3D.parameters)
}

// -------------------------------------------------------------------

// Rotation3D_Parameters

// .ist_slam.transform.proto.Quaterniond delta_rotation_imu_frame = 1;
inline bool Rotation3D_Parameters::has_delta_rotation_imu_frame() const {
  return this != internal_default_instance() && delta_rotation_imu_frame_ != NULL;
}
inline void Rotation3D_Parameters::clear_delta_rotation_imu_frame() {
  if (GetArenaNoVirtual() == NULL && delta_rotation_imu_frame_ != NULL) delete delta_rotation_imu_frame_;
  delta_rotation_imu_frame_ = NULL;
}
inline const ::ist_slam::transform::proto::Quaterniond& Rotation3D_Parameters::delta_rotation_imu_frame() const {
  const ::ist_slam::transform::proto::Quaterniond* p = delta_rotation_imu_frame_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.Rotation3D.Parameters.delta_rotation_imu_frame)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::transform::proto::Quaterniond*>(
      &::ist_slam::transform::proto::_Quaterniond_default_instance_);
}
inline ::ist_slam::transform::proto::Quaterniond* Rotation3D_Parameters::mutable_delta_rotation_imu_frame() {
  
  if (delta_rotation_imu_frame_ == NULL) {
    delta_rotation_imu_frame_ = new ::ist_slam::transform::proto::Quaterniond;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.Rotation3D.Parameters.delta_rotation_imu_frame)
  return delta_rotation_imu_frame_;
}
inline ::ist_slam::transform::proto::Quaterniond* Rotation3D_Parameters::release_delta_rotation_imu_frame() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.Rotation3D.Parameters.delta_rotation_imu_frame)
  
  ::ist_slam::transform::proto::Quaterniond* temp = delta_rotation_imu_frame_;
  delta_rotation_imu_frame_ = NULL;
  return temp;
}
inline void Rotation3D_Parameters::set_allocated_delta_rotation_imu_frame(::ist_slam::transform::proto::Quaterniond* delta_rotation_imu_frame) {
  delete delta_rotation_imu_frame_;
  delta_rotation_imu_frame_ = delta_rotation_imu_frame;
  if (delta_rotation_imu_frame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.Rotation3D.Parameters.delta_rotation_imu_frame)
}

// double scaling_factor = 2;
inline void Rotation3D_Parameters::clear_scaling_factor() {
  scaling_factor_ = 0;
}
inline double Rotation3D_Parameters::scaling_factor() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.Rotation3D.Parameters.scaling_factor)
  return scaling_factor_;
}
inline void Rotation3D_Parameters::set_scaling_factor(double value) {
  
  scaling_factor_ = value;
  // @@protoc_insertion_point(field_set:ist_slam.pose_graph.proto.Rotation3D.Parameters.scaling_factor)
}

// -------------------------------------------------------------------

// Rotation3D

// .ist_slam.pose_graph.proto.NodeId first = 1;
inline bool Rotation3D::has_first() const {
  return this != internal_default_instance() && first_ != NULL;
}
inline void Rotation3D::clear_first() {
  if (GetArenaNoVirtual() == NULL && first_ != NULL) delete first_;
  first_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::NodeId& Rotation3D::first() const {
  const ::ist_slam::pose_graph::proto::NodeId* p = first_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.Rotation3D.first)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::NodeId*>(
      &::ist_slam::pose_graph::proto::_NodeId_default_instance_);
}
inline ::ist_slam::pose_graph::proto::NodeId* Rotation3D::mutable_first() {
  
  if (first_ == NULL) {
    first_ = new ::ist_slam::pose_graph::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.Rotation3D.first)
  return first_;
}
inline ::ist_slam::pose_graph::proto::NodeId* Rotation3D::release_first() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.Rotation3D.first)
  
  ::ist_slam::pose_graph::proto::NodeId* temp = first_;
  first_ = NULL;
  return temp;
}
inline void Rotation3D::set_allocated_first(::ist_slam::pose_graph::proto::NodeId* first) {
  delete first_;
  first_ = first;
  if (first) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.Rotation3D.first)
}

// .ist_slam.pose_graph.proto.NodeId second = 2;
inline bool Rotation3D::has_second() const {
  return this != internal_default_instance() && second_ != NULL;
}
inline void Rotation3D::clear_second() {
  if (GetArenaNoVirtual() == NULL && second_ != NULL) delete second_;
  second_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::NodeId& Rotation3D::second() const {
  const ::ist_slam::pose_graph::proto::NodeId* p = second_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.Rotation3D.second)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::NodeId*>(
      &::ist_slam::pose_graph::proto::_NodeId_default_instance_);
}
inline ::ist_slam::pose_graph::proto::NodeId* Rotation3D::mutable_second() {
  
  if (second_ == NULL) {
    second_ = new ::ist_slam::pose_graph::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.Rotation3D.second)
  return second_;
}
inline ::ist_slam::pose_graph::proto::NodeId* Rotation3D::release_second() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.Rotation3D.second)
  
  ::ist_slam::pose_graph::proto::NodeId* temp = second_;
  second_ = NULL;
  return temp;
}
inline void Rotation3D::set_allocated_second(::ist_slam::pose_graph::proto::NodeId* second) {
  delete second_;
  second_ = second;
  if (second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.Rotation3D.second)
}

// .ist_slam.pose_graph.proto.NodeId imu_calibration = 3;
inline bool Rotation3D::has_imu_calibration() const {
  return this != internal_default_instance() && imu_calibration_ != NULL;
}
inline void Rotation3D::clear_imu_calibration() {
  if (GetArenaNoVirtual() == NULL && imu_calibration_ != NULL) delete imu_calibration_;
  imu_calibration_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::NodeId& Rotation3D::imu_calibration() const {
  const ::ist_slam::pose_graph::proto::NodeId* p = imu_calibration_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.Rotation3D.imu_calibration)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::NodeId*>(
      &::ist_slam::pose_graph::proto::_NodeId_default_instance_);
}
inline ::ist_slam::pose_graph::proto::NodeId* Rotation3D::mutable_imu_calibration() {
  
  if (imu_calibration_ == NULL) {
    imu_calibration_ = new ::ist_slam::pose_graph::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.Rotation3D.imu_calibration)
  return imu_calibration_;
}
inline ::ist_slam::pose_graph::proto::NodeId* Rotation3D::release_imu_calibration() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.Rotation3D.imu_calibration)
  
  ::ist_slam::pose_graph::proto::NodeId* temp = imu_calibration_;
  imu_calibration_ = NULL;
  return temp;
}
inline void Rotation3D::set_allocated_imu_calibration(::ist_slam::pose_graph::proto::NodeId* imu_calibration) {
  delete imu_calibration_;
  imu_calibration_ = imu_calibration;
  if (imu_calibration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.Rotation3D.imu_calibration)
}

// .ist_slam.pose_graph.proto.Rotation3D.Parameters parameters = 4;
inline bool Rotation3D::has_parameters() const {
  return this != internal_default_instance() && parameters_ != NULL;
}
inline void Rotation3D::clear_parameters() {
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) delete parameters_;
  parameters_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::Rotation3D_Parameters& Rotation3D::parameters() const {
  const ::ist_slam::pose_graph::proto::Rotation3D_Parameters* p = parameters_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.Rotation3D.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::Rotation3D_Parameters*>(
      &::ist_slam::pose_graph::proto::_Rotation3D_Parameters_default_instance_);
}
inline ::ist_slam::pose_graph::proto::Rotation3D_Parameters* Rotation3D::mutable_parameters() {
  
  if (parameters_ == NULL) {
    parameters_ = new ::ist_slam::pose_graph::proto::Rotation3D_Parameters;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.Rotation3D.parameters)
  return parameters_;
}
inline ::ist_slam::pose_graph::proto::Rotation3D_Parameters* Rotation3D::release_parameters() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.Rotation3D.parameters)
  
  ::ist_slam::pose_graph::proto::Rotation3D_Parameters* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline void Rotation3D::set_allocated_parameters(::ist_slam::pose_graph::proto::Rotation3D_Parameters* parameters) {
  delete parameters_;
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.Rotation3D.parameters)
}

// -------------------------------------------------------------------

// InterpolatedRelativePose2D_Parameters

// .ist_slam.transform.proto.Rigid3d first_t_second = 1;
inline bool InterpolatedRelativePose2D_Parameters::has_first_t_second() const {
  return this != internal_default_instance() && first_t_second_ != NULL;
}
inline void InterpolatedRelativePose2D_Parameters::clear_first_t_second() {
  if (GetArenaNoVirtual() == NULL && first_t_second_ != NULL) delete first_t_second_;
  first_t_second_ = NULL;
}
inline const ::ist_slam::transform::proto::Rigid3d& InterpolatedRelativePose2D_Parameters::first_t_second() const {
  const ::ist_slam::transform::proto::Rigid3d* p = first_t_second_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters.first_t_second)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::transform::proto::Rigid3d*>(
      &::ist_slam::transform::proto::_Rigid3d_default_instance_);
}
inline ::ist_slam::transform::proto::Rigid3d* InterpolatedRelativePose2D_Parameters::mutable_first_t_second() {
  
  if (first_t_second_ == NULL) {
    first_t_second_ = new ::ist_slam::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters.first_t_second)
  return first_t_second_;
}
inline ::ist_slam::transform::proto::Rigid3d* InterpolatedRelativePose2D_Parameters::release_first_t_second() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters.first_t_second)
  
  ::ist_slam::transform::proto::Rigid3d* temp = first_t_second_;
  first_t_second_ = NULL;
  return temp;
}
inline void InterpolatedRelativePose2D_Parameters::set_allocated_first_t_second(::ist_slam::transform::proto::Rigid3d* first_t_second) {
  delete first_t_second_;
  first_t_second_ = first_t_second;
  if (first_t_second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters.first_t_second)
}

// double translation_weight = 2;
inline void InterpolatedRelativePose2D_Parameters::clear_translation_weight() {
  translation_weight_ = 0;
}
inline double InterpolatedRelativePose2D_Parameters::translation_weight() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters.translation_weight)
  return translation_weight_;
}
inline void InterpolatedRelativePose2D_Parameters::set_translation_weight(double value) {
  
  translation_weight_ = value;
  // @@protoc_insertion_point(field_set:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters.translation_weight)
}

// double rotation_weight = 3;
inline void InterpolatedRelativePose2D_Parameters::clear_rotation_weight() {
  rotation_weight_ = 0;
}
inline double InterpolatedRelativePose2D_Parameters::rotation_weight() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters.rotation_weight)
  return rotation_weight_;
}
inline void InterpolatedRelativePose2D_Parameters::set_rotation_weight(double value) {
  
  rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters.rotation_weight)
}

// .ist_slam.transform.proto.Quaterniond gravity_alignment_first_start = 4;
inline bool InterpolatedRelativePose2D_Parameters::has_gravity_alignment_first_start() const {
  return this != internal_default_instance() && gravity_alignment_first_start_ != NULL;
}
inline void InterpolatedRelativePose2D_Parameters::clear_gravity_alignment_first_start() {
  if (GetArenaNoVirtual() == NULL && gravity_alignment_first_start_ != NULL) delete gravity_alignment_first_start_;
  gravity_alignment_first_start_ = NULL;
}
inline const ::ist_slam::transform::proto::Quaterniond& InterpolatedRelativePose2D_Parameters::gravity_alignment_first_start() const {
  const ::ist_slam::transform::proto::Quaterniond* p = gravity_alignment_first_start_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters.gravity_alignment_first_start)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::transform::proto::Quaterniond*>(
      &::ist_slam::transform::proto::_Quaterniond_default_instance_);
}
inline ::ist_slam::transform::proto::Quaterniond* InterpolatedRelativePose2D_Parameters::mutable_gravity_alignment_first_start() {
  
  if (gravity_alignment_first_start_ == NULL) {
    gravity_alignment_first_start_ = new ::ist_slam::transform::proto::Quaterniond;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters.gravity_alignment_first_start)
  return gravity_alignment_first_start_;
}
inline ::ist_slam::transform::proto::Quaterniond* InterpolatedRelativePose2D_Parameters::release_gravity_alignment_first_start() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters.gravity_alignment_first_start)
  
  ::ist_slam::transform::proto::Quaterniond* temp = gravity_alignment_first_start_;
  gravity_alignment_first_start_ = NULL;
  return temp;
}
inline void InterpolatedRelativePose2D_Parameters::set_allocated_gravity_alignment_first_start(::ist_slam::transform::proto::Quaterniond* gravity_alignment_first_start) {
  delete gravity_alignment_first_start_;
  gravity_alignment_first_start_ = gravity_alignment_first_start;
  if (gravity_alignment_first_start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters.gravity_alignment_first_start)
}

// .ist_slam.transform.proto.Quaterniond gravity_alignment_first_end = 5;
inline bool InterpolatedRelativePose2D_Parameters::has_gravity_alignment_first_end() const {
  return this != internal_default_instance() && gravity_alignment_first_end_ != NULL;
}
inline void InterpolatedRelativePose2D_Parameters::clear_gravity_alignment_first_end() {
  if (GetArenaNoVirtual() == NULL && gravity_alignment_first_end_ != NULL) delete gravity_alignment_first_end_;
  gravity_alignment_first_end_ = NULL;
}
inline const ::ist_slam::transform::proto::Quaterniond& InterpolatedRelativePose2D_Parameters::gravity_alignment_first_end() const {
  const ::ist_slam::transform::proto::Quaterniond* p = gravity_alignment_first_end_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters.gravity_alignment_first_end)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::transform::proto::Quaterniond*>(
      &::ist_slam::transform::proto::_Quaterniond_default_instance_);
}
inline ::ist_slam::transform::proto::Quaterniond* InterpolatedRelativePose2D_Parameters::mutable_gravity_alignment_first_end() {
  
  if (gravity_alignment_first_end_ == NULL) {
    gravity_alignment_first_end_ = new ::ist_slam::transform::proto::Quaterniond;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters.gravity_alignment_first_end)
  return gravity_alignment_first_end_;
}
inline ::ist_slam::transform::proto::Quaterniond* InterpolatedRelativePose2D_Parameters::release_gravity_alignment_first_end() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters.gravity_alignment_first_end)
  
  ::ist_slam::transform::proto::Quaterniond* temp = gravity_alignment_first_end_;
  gravity_alignment_first_end_ = NULL;
  return temp;
}
inline void InterpolatedRelativePose2D_Parameters::set_allocated_gravity_alignment_first_end(::ist_slam::transform::proto::Quaterniond* gravity_alignment_first_end) {
  delete gravity_alignment_first_end_;
  gravity_alignment_first_end_ = gravity_alignment_first_end;
  if (gravity_alignment_first_end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters.gravity_alignment_first_end)
}

// double interpolation_factor = 6;
inline void InterpolatedRelativePose2D_Parameters::clear_interpolation_factor() {
  interpolation_factor_ = 0;
}
inline double InterpolatedRelativePose2D_Parameters::interpolation_factor() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters.interpolation_factor)
  return interpolation_factor_;
}
inline void InterpolatedRelativePose2D_Parameters::set_interpolation_factor(double value) {
  
  interpolation_factor_ = value;
  // @@protoc_insertion_point(field_set:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters.interpolation_factor)
}

// -------------------------------------------------------------------

// InterpolatedRelativePose2D

// .ist_slam.pose_graph.proto.NodeId first_start = 1;
inline bool InterpolatedRelativePose2D::has_first_start() const {
  return this != internal_default_instance() && first_start_ != NULL;
}
inline void InterpolatedRelativePose2D::clear_first_start() {
  if (GetArenaNoVirtual() == NULL && first_start_ != NULL) delete first_start_;
  first_start_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::NodeId& InterpolatedRelativePose2D::first_start() const {
  const ::ist_slam::pose_graph::proto::NodeId* p = first_start_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.first_start)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::NodeId*>(
      &::ist_slam::pose_graph::proto::_NodeId_default_instance_);
}
inline ::ist_slam::pose_graph::proto::NodeId* InterpolatedRelativePose2D::mutable_first_start() {
  
  if (first_start_ == NULL) {
    first_start_ = new ::ist_slam::pose_graph::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.first_start)
  return first_start_;
}
inline ::ist_slam::pose_graph::proto::NodeId* InterpolatedRelativePose2D::release_first_start() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.first_start)
  
  ::ist_slam::pose_graph::proto::NodeId* temp = first_start_;
  first_start_ = NULL;
  return temp;
}
inline void InterpolatedRelativePose2D::set_allocated_first_start(::ist_slam::pose_graph::proto::NodeId* first_start) {
  delete first_start_;
  first_start_ = first_start;
  if (first_start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.first_start)
}

// .ist_slam.pose_graph.proto.NodeId first_end = 2;
inline bool InterpolatedRelativePose2D::has_first_end() const {
  return this != internal_default_instance() && first_end_ != NULL;
}
inline void InterpolatedRelativePose2D::clear_first_end() {
  if (GetArenaNoVirtual() == NULL && first_end_ != NULL) delete first_end_;
  first_end_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::NodeId& InterpolatedRelativePose2D::first_end() const {
  const ::ist_slam::pose_graph::proto::NodeId* p = first_end_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.first_end)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::NodeId*>(
      &::ist_slam::pose_graph::proto::_NodeId_default_instance_);
}
inline ::ist_slam::pose_graph::proto::NodeId* InterpolatedRelativePose2D::mutable_first_end() {
  
  if (first_end_ == NULL) {
    first_end_ = new ::ist_slam::pose_graph::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.first_end)
  return first_end_;
}
inline ::ist_slam::pose_graph::proto::NodeId* InterpolatedRelativePose2D::release_first_end() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.first_end)
  
  ::ist_slam::pose_graph::proto::NodeId* temp = first_end_;
  first_end_ = NULL;
  return temp;
}
inline void InterpolatedRelativePose2D::set_allocated_first_end(::ist_slam::pose_graph::proto::NodeId* first_end) {
  delete first_end_;
  first_end_ = first_end;
  if (first_end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.first_end)
}

// .ist_slam.pose_graph.proto.NodeId second = 3;
inline bool InterpolatedRelativePose2D::has_second() const {
  return this != internal_default_instance() && second_ != NULL;
}
inline void InterpolatedRelativePose2D::clear_second() {
  if (GetArenaNoVirtual() == NULL && second_ != NULL) delete second_;
  second_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::NodeId& InterpolatedRelativePose2D::second() const {
  const ::ist_slam::pose_graph::proto::NodeId* p = second_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.second)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::NodeId*>(
      &::ist_slam::pose_graph::proto::_NodeId_default_instance_);
}
inline ::ist_slam::pose_graph::proto::NodeId* InterpolatedRelativePose2D::mutable_second() {
  
  if (second_ == NULL) {
    second_ = new ::ist_slam::pose_graph::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.second)
  return second_;
}
inline ::ist_slam::pose_graph::proto::NodeId* InterpolatedRelativePose2D::release_second() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.second)
  
  ::ist_slam::pose_graph::proto::NodeId* temp = second_;
  second_ = NULL;
  return temp;
}
inline void InterpolatedRelativePose2D::set_allocated_second(::ist_slam::pose_graph::proto::NodeId* second) {
  delete second_;
  second_ = second;
  if (second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.second)
}

// .ist_slam.pose_graph.proto.InterpolatedRelativePose2D.Parameters parameters = 4;
inline bool InterpolatedRelativePose2D::has_parameters() const {
  return this != internal_default_instance() && parameters_ != NULL;
}
inline void InterpolatedRelativePose2D::clear_parameters() {
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) delete parameters_;
  parameters_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D_Parameters& InterpolatedRelativePose2D::parameters() const {
  const ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D_Parameters* p = parameters_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D_Parameters*>(
      &::ist_slam::pose_graph::proto::_InterpolatedRelativePose2D_Parameters_default_instance_);
}
inline ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D_Parameters* InterpolatedRelativePose2D::mutable_parameters() {
  
  if (parameters_ == NULL) {
    parameters_ = new ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D_Parameters;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.parameters)
  return parameters_;
}
inline ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D_Parameters* InterpolatedRelativePose2D::release_parameters() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.parameters)
  
  ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D_Parameters* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline void InterpolatedRelativePose2D::set_allocated_parameters(::ist_slam::pose_graph::proto::InterpolatedRelativePose2D_Parameters* parameters) {
  delete parameters_;
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.InterpolatedRelativePose2D.parameters)
}

// -------------------------------------------------------------------

// InterpolatedRelativePose3D_Parameters

// .ist_slam.transform.proto.Rigid3d first_t_second = 1;
inline bool InterpolatedRelativePose3D_Parameters::has_first_t_second() const {
  return this != internal_default_instance() && first_t_second_ != NULL;
}
inline void InterpolatedRelativePose3D_Parameters::clear_first_t_second() {
  if (GetArenaNoVirtual() == NULL && first_t_second_ != NULL) delete first_t_second_;
  first_t_second_ = NULL;
}
inline const ::ist_slam::transform::proto::Rigid3d& InterpolatedRelativePose3D_Parameters::first_t_second() const {
  const ::ist_slam::transform::proto::Rigid3d* p = first_t_second_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.Parameters.first_t_second)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::transform::proto::Rigid3d*>(
      &::ist_slam::transform::proto::_Rigid3d_default_instance_);
}
inline ::ist_slam::transform::proto::Rigid3d* InterpolatedRelativePose3D_Parameters::mutable_first_t_second() {
  
  if (first_t_second_ == NULL) {
    first_t_second_ = new ::ist_slam::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.Parameters.first_t_second)
  return first_t_second_;
}
inline ::ist_slam::transform::proto::Rigid3d* InterpolatedRelativePose3D_Parameters::release_first_t_second() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.Parameters.first_t_second)
  
  ::ist_slam::transform::proto::Rigid3d* temp = first_t_second_;
  first_t_second_ = NULL;
  return temp;
}
inline void InterpolatedRelativePose3D_Parameters::set_allocated_first_t_second(::ist_slam::transform::proto::Rigid3d* first_t_second) {
  delete first_t_second_;
  first_t_second_ = first_t_second;
  if (first_t_second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.Parameters.first_t_second)
}

// double translation_weight = 2;
inline void InterpolatedRelativePose3D_Parameters::clear_translation_weight() {
  translation_weight_ = 0;
}
inline double InterpolatedRelativePose3D_Parameters::translation_weight() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.Parameters.translation_weight)
  return translation_weight_;
}
inline void InterpolatedRelativePose3D_Parameters::set_translation_weight(double value) {
  
  translation_weight_ = value;
  // @@protoc_insertion_point(field_set:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.Parameters.translation_weight)
}

// double rotation_weight = 3;
inline void InterpolatedRelativePose3D_Parameters::clear_rotation_weight() {
  rotation_weight_ = 0;
}
inline double InterpolatedRelativePose3D_Parameters::rotation_weight() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.Parameters.rotation_weight)
  return rotation_weight_;
}
inline void InterpolatedRelativePose3D_Parameters::set_rotation_weight(double value) {
  
  rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.Parameters.rotation_weight)
}

// double interpolation_factor = 4;
inline void InterpolatedRelativePose3D_Parameters::clear_interpolation_factor() {
  interpolation_factor_ = 0;
}
inline double InterpolatedRelativePose3D_Parameters::interpolation_factor() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.Parameters.interpolation_factor)
  return interpolation_factor_;
}
inline void InterpolatedRelativePose3D_Parameters::set_interpolation_factor(double value) {
  
  interpolation_factor_ = value;
  // @@protoc_insertion_point(field_set:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.Parameters.interpolation_factor)
}

// -------------------------------------------------------------------

// InterpolatedRelativePose3D

// .ist_slam.pose_graph.proto.NodeId first_start = 1;
inline bool InterpolatedRelativePose3D::has_first_start() const {
  return this != internal_default_instance() && first_start_ != NULL;
}
inline void InterpolatedRelativePose3D::clear_first_start() {
  if (GetArenaNoVirtual() == NULL && first_start_ != NULL) delete first_start_;
  first_start_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::NodeId& InterpolatedRelativePose3D::first_start() const {
  const ::ist_slam::pose_graph::proto::NodeId* p = first_start_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.first_start)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::NodeId*>(
      &::ist_slam::pose_graph::proto::_NodeId_default_instance_);
}
inline ::ist_slam::pose_graph::proto::NodeId* InterpolatedRelativePose3D::mutable_first_start() {
  
  if (first_start_ == NULL) {
    first_start_ = new ::ist_slam::pose_graph::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.first_start)
  return first_start_;
}
inline ::ist_slam::pose_graph::proto::NodeId* InterpolatedRelativePose3D::release_first_start() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.first_start)
  
  ::ist_slam::pose_graph::proto::NodeId* temp = first_start_;
  first_start_ = NULL;
  return temp;
}
inline void InterpolatedRelativePose3D::set_allocated_first_start(::ist_slam::pose_graph::proto::NodeId* first_start) {
  delete first_start_;
  first_start_ = first_start;
  if (first_start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.first_start)
}

// .ist_slam.pose_graph.proto.NodeId first_end = 2;
inline bool InterpolatedRelativePose3D::has_first_end() const {
  return this != internal_default_instance() && first_end_ != NULL;
}
inline void InterpolatedRelativePose3D::clear_first_end() {
  if (GetArenaNoVirtual() == NULL && first_end_ != NULL) delete first_end_;
  first_end_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::NodeId& InterpolatedRelativePose3D::first_end() const {
  const ::ist_slam::pose_graph::proto::NodeId* p = first_end_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.first_end)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::NodeId*>(
      &::ist_slam::pose_graph::proto::_NodeId_default_instance_);
}
inline ::ist_slam::pose_graph::proto::NodeId* InterpolatedRelativePose3D::mutable_first_end() {
  
  if (first_end_ == NULL) {
    first_end_ = new ::ist_slam::pose_graph::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.first_end)
  return first_end_;
}
inline ::ist_slam::pose_graph::proto::NodeId* InterpolatedRelativePose3D::release_first_end() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.first_end)
  
  ::ist_slam::pose_graph::proto::NodeId* temp = first_end_;
  first_end_ = NULL;
  return temp;
}
inline void InterpolatedRelativePose3D::set_allocated_first_end(::ist_slam::pose_graph::proto::NodeId* first_end) {
  delete first_end_;
  first_end_ = first_end;
  if (first_end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.first_end)
}

// .ist_slam.pose_graph.proto.NodeId second = 3;
inline bool InterpolatedRelativePose3D::has_second() const {
  return this != internal_default_instance() && second_ != NULL;
}
inline void InterpolatedRelativePose3D::clear_second() {
  if (GetArenaNoVirtual() == NULL && second_ != NULL) delete second_;
  second_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::NodeId& InterpolatedRelativePose3D::second() const {
  const ::ist_slam::pose_graph::proto::NodeId* p = second_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.second)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::NodeId*>(
      &::ist_slam::pose_graph::proto::_NodeId_default_instance_);
}
inline ::ist_slam::pose_graph::proto::NodeId* InterpolatedRelativePose3D::mutable_second() {
  
  if (second_ == NULL) {
    second_ = new ::ist_slam::pose_graph::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.second)
  return second_;
}
inline ::ist_slam::pose_graph::proto::NodeId* InterpolatedRelativePose3D::release_second() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.second)
  
  ::ist_slam::pose_graph::proto::NodeId* temp = second_;
  second_ = NULL;
  return temp;
}
inline void InterpolatedRelativePose3D::set_allocated_second(::ist_slam::pose_graph::proto::NodeId* second) {
  delete second_;
  second_ = second;
  if (second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.second)
}

// .ist_slam.pose_graph.proto.InterpolatedRelativePose3D.Parameters parameters = 4;
inline bool InterpolatedRelativePose3D::has_parameters() const {
  return this != internal_default_instance() && parameters_ != NULL;
}
inline void InterpolatedRelativePose3D::clear_parameters() {
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) delete parameters_;
  parameters_ = NULL;
}
inline const ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D_Parameters& InterpolatedRelativePose3D::parameters() const {
  const ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D_Parameters* p = parameters_;
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D_Parameters*>(
      &::ist_slam::pose_graph::proto::_InterpolatedRelativePose3D_Parameters_default_instance_);
}
inline ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D_Parameters* InterpolatedRelativePose3D::mutable_parameters() {
  
  if (parameters_ == NULL) {
    parameters_ = new ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D_Parameters;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.parameters)
  return parameters_;
}
inline ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D_Parameters* InterpolatedRelativePose3D::release_parameters() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.parameters)
  
  ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D_Parameters* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline void InterpolatedRelativePose3D::set_allocated_parameters(::ist_slam::pose_graph::proto::InterpolatedRelativePose3D_Parameters* parameters) {
  delete parameters_;
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.InterpolatedRelativePose3D.parameters)
}

// -------------------------------------------------------------------

// CostFunction

// .ist_slam.pose_graph.proto.RelativePose2D relative_pose_2d = 1;
inline bool CostFunction::has_relative_pose_2d() const {
  return type_case() == kRelativePose2D;
}
inline void CostFunction::set_has_relative_pose_2d() {
  _oneof_case_[0] = kRelativePose2D;
}
inline void CostFunction::clear_relative_pose_2d() {
  if (has_relative_pose_2d()) {
    delete type_.relative_pose_2d_;
    clear_has_type();
  }
}
inline  const ::ist_slam::pose_graph::proto::RelativePose2D& CostFunction::relative_pose_2d() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.CostFunction.relative_pose_2d)
  return has_relative_pose_2d()
      ? *type_.relative_pose_2d_
      : ::ist_slam::pose_graph::proto::RelativePose2D::default_instance();
}
inline ::ist_slam::pose_graph::proto::RelativePose2D* CostFunction::mutable_relative_pose_2d() {
  if (!has_relative_pose_2d()) {
    clear_type();
    set_has_relative_pose_2d();
    type_.relative_pose_2d_ = new ::ist_slam::pose_graph::proto::RelativePose2D;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.CostFunction.relative_pose_2d)
  return type_.relative_pose_2d_;
}
inline ::ist_slam::pose_graph::proto::RelativePose2D* CostFunction::release_relative_pose_2d() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.CostFunction.relative_pose_2d)
  if (has_relative_pose_2d()) {
    clear_has_type();
    ::ist_slam::pose_graph::proto::RelativePose2D* temp = type_.relative_pose_2d_;
    type_.relative_pose_2d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CostFunction::set_allocated_relative_pose_2d(::ist_slam::pose_graph::proto::RelativePose2D* relative_pose_2d) {
  clear_type();
  if (relative_pose_2d) {
    set_has_relative_pose_2d();
    type_.relative_pose_2d_ = relative_pose_2d;
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.CostFunction.relative_pose_2d)
}

// .ist_slam.pose_graph.proto.RelativePose3D relative_pose_3d = 2;
inline bool CostFunction::has_relative_pose_3d() const {
  return type_case() == kRelativePose3D;
}
inline void CostFunction::set_has_relative_pose_3d() {
  _oneof_case_[0] = kRelativePose3D;
}
inline void CostFunction::clear_relative_pose_3d() {
  if (has_relative_pose_3d()) {
    delete type_.relative_pose_3d_;
    clear_has_type();
  }
}
inline  const ::ist_slam::pose_graph::proto::RelativePose3D& CostFunction::relative_pose_3d() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.CostFunction.relative_pose_3d)
  return has_relative_pose_3d()
      ? *type_.relative_pose_3d_
      : ::ist_slam::pose_graph::proto::RelativePose3D::default_instance();
}
inline ::ist_slam::pose_graph::proto::RelativePose3D* CostFunction::mutable_relative_pose_3d() {
  if (!has_relative_pose_3d()) {
    clear_type();
    set_has_relative_pose_3d();
    type_.relative_pose_3d_ = new ::ist_slam::pose_graph::proto::RelativePose3D;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.CostFunction.relative_pose_3d)
  return type_.relative_pose_3d_;
}
inline ::ist_slam::pose_graph::proto::RelativePose3D* CostFunction::release_relative_pose_3d() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.CostFunction.relative_pose_3d)
  if (has_relative_pose_3d()) {
    clear_has_type();
    ::ist_slam::pose_graph::proto::RelativePose3D* temp = type_.relative_pose_3d_;
    type_.relative_pose_3d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CostFunction::set_allocated_relative_pose_3d(::ist_slam::pose_graph::proto::RelativePose3D* relative_pose_3d) {
  clear_type();
  if (relative_pose_3d) {
    set_has_relative_pose_3d();
    type_.relative_pose_3d_ = relative_pose_3d;
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.CostFunction.relative_pose_3d)
}

// .ist_slam.pose_graph.proto.Acceleration3D acceleration_3d = 3;
inline bool CostFunction::has_acceleration_3d() const {
  return type_case() == kAcceleration3D;
}
inline void CostFunction::set_has_acceleration_3d() {
  _oneof_case_[0] = kAcceleration3D;
}
inline void CostFunction::clear_acceleration_3d() {
  if (has_acceleration_3d()) {
    delete type_.acceleration_3d_;
    clear_has_type();
  }
}
inline  const ::ist_slam::pose_graph::proto::Acceleration3D& CostFunction::acceleration_3d() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.CostFunction.acceleration_3d)
  return has_acceleration_3d()
      ? *type_.acceleration_3d_
      : ::ist_slam::pose_graph::proto::Acceleration3D::default_instance();
}
inline ::ist_slam::pose_graph::proto::Acceleration3D* CostFunction::mutable_acceleration_3d() {
  if (!has_acceleration_3d()) {
    clear_type();
    set_has_acceleration_3d();
    type_.acceleration_3d_ = new ::ist_slam::pose_graph::proto::Acceleration3D;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.CostFunction.acceleration_3d)
  return type_.acceleration_3d_;
}
inline ::ist_slam::pose_graph::proto::Acceleration3D* CostFunction::release_acceleration_3d() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.CostFunction.acceleration_3d)
  if (has_acceleration_3d()) {
    clear_has_type();
    ::ist_slam::pose_graph::proto::Acceleration3D* temp = type_.acceleration_3d_;
    type_.acceleration_3d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CostFunction::set_allocated_acceleration_3d(::ist_slam::pose_graph::proto::Acceleration3D* acceleration_3d) {
  clear_type();
  if (acceleration_3d) {
    set_has_acceleration_3d();
    type_.acceleration_3d_ = acceleration_3d;
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.CostFunction.acceleration_3d)
}

// .ist_slam.pose_graph.proto.Rotation3D rotation_3d = 4;
inline bool CostFunction::has_rotation_3d() const {
  return type_case() == kRotation3D;
}
inline void CostFunction::set_has_rotation_3d() {
  _oneof_case_[0] = kRotation3D;
}
inline void CostFunction::clear_rotation_3d() {
  if (has_rotation_3d()) {
    delete type_.rotation_3d_;
    clear_has_type();
  }
}
inline  const ::ist_slam::pose_graph::proto::Rotation3D& CostFunction::rotation_3d() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.CostFunction.rotation_3d)
  return has_rotation_3d()
      ? *type_.rotation_3d_
      : ::ist_slam::pose_graph::proto::Rotation3D::default_instance();
}
inline ::ist_slam::pose_graph::proto::Rotation3D* CostFunction::mutable_rotation_3d() {
  if (!has_rotation_3d()) {
    clear_type();
    set_has_rotation_3d();
    type_.rotation_3d_ = new ::ist_slam::pose_graph::proto::Rotation3D;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.CostFunction.rotation_3d)
  return type_.rotation_3d_;
}
inline ::ist_slam::pose_graph::proto::Rotation3D* CostFunction::release_rotation_3d() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.CostFunction.rotation_3d)
  if (has_rotation_3d()) {
    clear_has_type();
    ::ist_slam::pose_graph::proto::Rotation3D* temp = type_.rotation_3d_;
    type_.rotation_3d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CostFunction::set_allocated_rotation_3d(::ist_slam::pose_graph::proto::Rotation3D* rotation_3d) {
  clear_type();
  if (rotation_3d) {
    set_has_rotation_3d();
    type_.rotation_3d_ = rotation_3d;
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.CostFunction.rotation_3d)
}

// .ist_slam.pose_graph.proto.InterpolatedRelativePose2D interpolated_relative_pose_2d = 5;
inline bool CostFunction::has_interpolated_relative_pose_2d() const {
  return type_case() == kInterpolatedRelativePose2D;
}
inline void CostFunction::set_has_interpolated_relative_pose_2d() {
  _oneof_case_[0] = kInterpolatedRelativePose2D;
}
inline void CostFunction::clear_interpolated_relative_pose_2d() {
  if (has_interpolated_relative_pose_2d()) {
    delete type_.interpolated_relative_pose_2d_;
    clear_has_type();
  }
}
inline  const ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D& CostFunction::interpolated_relative_pose_2d() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.CostFunction.interpolated_relative_pose_2d)
  return has_interpolated_relative_pose_2d()
      ? *type_.interpolated_relative_pose_2d_
      : ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D::default_instance();
}
inline ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D* CostFunction::mutable_interpolated_relative_pose_2d() {
  if (!has_interpolated_relative_pose_2d()) {
    clear_type();
    set_has_interpolated_relative_pose_2d();
    type_.interpolated_relative_pose_2d_ = new ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.CostFunction.interpolated_relative_pose_2d)
  return type_.interpolated_relative_pose_2d_;
}
inline ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D* CostFunction::release_interpolated_relative_pose_2d() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.CostFunction.interpolated_relative_pose_2d)
  if (has_interpolated_relative_pose_2d()) {
    clear_has_type();
    ::ist_slam::pose_graph::proto::InterpolatedRelativePose2D* temp = type_.interpolated_relative_pose_2d_;
    type_.interpolated_relative_pose_2d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CostFunction::set_allocated_interpolated_relative_pose_2d(::ist_slam::pose_graph::proto::InterpolatedRelativePose2D* interpolated_relative_pose_2d) {
  clear_type();
  if (interpolated_relative_pose_2d) {
    set_has_interpolated_relative_pose_2d();
    type_.interpolated_relative_pose_2d_ = interpolated_relative_pose_2d;
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.CostFunction.interpolated_relative_pose_2d)
}

// .ist_slam.pose_graph.proto.InterpolatedRelativePose3D interpolated_relative_pose_3d = 6;
inline bool CostFunction::has_interpolated_relative_pose_3d() const {
  return type_case() == kInterpolatedRelativePose3D;
}
inline void CostFunction::set_has_interpolated_relative_pose_3d() {
  _oneof_case_[0] = kInterpolatedRelativePose3D;
}
inline void CostFunction::clear_interpolated_relative_pose_3d() {
  if (has_interpolated_relative_pose_3d()) {
    delete type_.interpolated_relative_pose_3d_;
    clear_has_type();
  }
}
inline  const ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D& CostFunction::interpolated_relative_pose_3d() const {
  // @@protoc_insertion_point(field_get:ist_slam.pose_graph.proto.CostFunction.interpolated_relative_pose_3d)
  return has_interpolated_relative_pose_3d()
      ? *type_.interpolated_relative_pose_3d_
      : ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D::default_instance();
}
inline ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D* CostFunction::mutable_interpolated_relative_pose_3d() {
  if (!has_interpolated_relative_pose_3d()) {
    clear_type();
    set_has_interpolated_relative_pose_3d();
    type_.interpolated_relative_pose_3d_ = new ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D;
  }
  // @@protoc_insertion_point(field_mutable:ist_slam.pose_graph.proto.CostFunction.interpolated_relative_pose_3d)
  return type_.interpolated_relative_pose_3d_;
}
inline ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D* CostFunction::release_interpolated_relative_pose_3d() {
  // @@protoc_insertion_point(field_release:ist_slam.pose_graph.proto.CostFunction.interpolated_relative_pose_3d)
  if (has_interpolated_relative_pose_3d()) {
    clear_has_type();
    ::ist_slam::pose_graph::proto::InterpolatedRelativePose3D* temp = type_.interpolated_relative_pose_3d_;
    type_.interpolated_relative_pose_3d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CostFunction::set_allocated_interpolated_relative_pose_3d(::ist_slam::pose_graph::proto::InterpolatedRelativePose3D* interpolated_relative_pose_3d) {
  clear_type();
  if (interpolated_relative_pose_3d) {
    set_has_interpolated_relative_pose_3d();
    type_.interpolated_relative_pose_3d_ = interpolated_relative_pose_3d;
  }
  // @@protoc_insertion_point(field_set_allocated:ist_slam.pose_graph.proto.CostFunction.interpolated_relative_pose_3d)
}

inline bool CostFunction::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void CostFunction::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline CostFunction::TypeCase CostFunction::type_case() const {
  return CostFunction::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace pose_graph
}  // namespace ist_slam

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ist_5fslam_2fpose_5fgraph_2fproto_2fcost_5ffunction_2eproto__INCLUDED
