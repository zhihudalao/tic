// Generated by gencpp from file ist_slam_ros_msgs/ReadMetricsResponse.msg
// DO NOT EDIT!


#ifndef IST_SLAM_ROS_MSGS_MESSAGE_READMETRICSRESPONSE_H
#define IST_SLAM_ROS_MSGS_MESSAGE_READMETRICSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ist_slam_ros_msgs/StatusResponse.h>
#include <ist_slam_ros_msgs/MetricFamily.h>

namespace ist_slam_ros_msgs
{
template <class ContainerAllocator>
struct ReadMetricsResponse_
{
  typedef ReadMetricsResponse_<ContainerAllocator> Type;

  ReadMetricsResponse_()
    : status()
    , metric_families()
    , timestamp()  {
    }
  ReadMetricsResponse_(const ContainerAllocator& _alloc)
    : status(_alloc)
    , metric_families(_alloc)
    , timestamp()  {
  (void)_alloc;
    }



   typedef  ::ist_slam_ros_msgs::StatusResponse_<ContainerAllocator>  _status_type;
  _status_type status;

   typedef std::vector< ::ist_slam_ros_msgs::MetricFamily_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ist_slam_ros_msgs::MetricFamily_<ContainerAllocator> >::other >  _metric_families_type;
  _metric_families_type metric_families;

   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ReadMetricsResponse_

typedef ::ist_slam_ros_msgs::ReadMetricsResponse_<std::allocator<void> > ReadMetricsResponse;

typedef boost::shared_ptr< ::ist_slam_ros_msgs::ReadMetricsResponse > ReadMetricsResponsePtr;
typedef boost::shared_ptr< ::ist_slam_ros_msgs::ReadMetricsResponse const> ReadMetricsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ist_slam_ros_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ist_slam_ros_msgs': ['/home/ubuntu/zrbase/src/ist_slam_ros/ist_slam_ros_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1fe8d7dcf3708e96e015774b1df470e";
  }

  static const char* value(const ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa1fe8d7dcf3708e9ULL;
  static const uint64_t static_value2 = 0x6e015774b1df470eULL;
};

template<class ContainerAllocator>
struct DataType< ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ist_slam_ros_msgs/ReadMetricsResponse";
  }

  static const char* value(const ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ist_slam_ros_msgs/StatusResponse status\n\
ist_slam_ros_msgs/MetricFamily[] metric_families\n\
time timestamp\n\
\n\
\n\
================================================================================\n\
MSG: ist_slam_ros_msgs/StatusResponse\n\
\n\
# A common message type to indicate the outcome of a service call.\n\
uint8 code\n\
string message\n\
\n\
================================================================================\n\
MSG: ist_slam_ros_msgs/MetricFamily\n\
\n\
string name\n\
string description\n\
ist_slam_ros_msgs/Metric[] metrics\n\
\n\
================================================================================\n\
MSG: ist_slam_ros_msgs/Metric\n\
\n\
uint8 TYPE_COUNTER=0\n\
uint8 TYPE_GAUGE=1\n\
uint8 TYPE_HISTOGRAM=2\n\
\n\
uint8 type\n\
ist_slam_ros_msgs/MetricLabel[] labels\n\
\n\
# TYPE_COUNTER or TYPE_GAUGE\n\
float64 value\n\
\n\
# TYPE_HISTOGRAM\n\
ist_slam_ros_msgs/HistogramBucket[] counts_by_bucket\n\
\n\
================================================================================\n\
MSG: ist_slam_ros_msgs/MetricLabel\n\
\n\
string key\n\
string value\n\
\n\
================================================================================\n\
MSG: ist_slam_ros_msgs/HistogramBucket\n\
\n\
# A histogram bucket counts values x for which:\n\
#   previous_boundary < x <= bucket_boundary\n\
# holds.\n\
float64 bucket_boundary\n\
float64 count\n\
";
  }

  static const char* value(const ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.metric_families);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReadMetricsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ist_slam_ros_msgs::ReadMetricsResponse_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    s << std::endl;
    Printer< ::ist_slam_ros_msgs::StatusResponse_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
    s << indent << "metric_families[]" << std::endl;
    for (size_t i = 0; i < v.metric_families.size(); ++i)
    {
      s << indent << "  metric_families[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ist_slam_ros_msgs::MetricFamily_<ContainerAllocator> >::stream(s, indent + "    ", v.metric_families[i]);
    }
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IST_SLAM_ROS_MSGS_MESSAGE_READMETRICSRESPONSE_H
