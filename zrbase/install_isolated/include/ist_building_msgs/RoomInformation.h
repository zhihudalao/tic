// Generated by gencpp from file ist_building_msgs/RoomInformation.msg
// DO NOT EDIT!


#ifndef IST_BUILDING_MSGS_MESSAGE_ROOMINFORMATION_H
#define IST_BUILDING_MSGS_MESSAGE_ROOMINFORMATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Polygon.h>
#include <geometry_msgs/Point32.h>

namespace ist_building_msgs
{
template <class ContainerAllocator>
struct RoomInformation_
{
  typedef RoomInformation_<ContainerAllocator> Type;

  RoomInformation_()
    : room_min_max()
    , room_center()  {
    }
  RoomInformation_(const ContainerAllocator& _alloc)
    : room_min_max(_alloc)
    , room_center(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _room_min_max_type;
  _room_min_max_type room_min_max;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _room_center_type;
  _room_center_type room_center;





  typedef boost::shared_ptr< ::ist_building_msgs::RoomInformation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ist_building_msgs::RoomInformation_<ContainerAllocator> const> ConstPtr;

}; // struct RoomInformation_

typedef ::ist_building_msgs::RoomInformation_<std::allocator<void> > RoomInformation;

typedef boost::shared_ptr< ::ist_building_msgs::RoomInformation > RoomInformationPtr;
typedef boost::shared_ptr< ::ist_building_msgs::RoomInformation const> RoomInformationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ist_building_msgs::RoomInformation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ist_building_msgs::RoomInformation_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ist_building_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'ist_building_msgs': ['/home/ubuntu/zrbase/devel_isolated/ist_building_msgs/share/ist_building_msgs/msg', '/home/ubuntu/zrbase/src/caei/ist_exploration/ist_building_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ist_building_msgs::RoomInformation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ist_building_msgs::RoomInformation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ist_building_msgs::RoomInformation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ist_building_msgs::RoomInformation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ist_building_msgs::RoomInformation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ist_building_msgs::RoomInformation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ist_building_msgs::RoomInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c095dc11b0eae6e6ce775e203036a201";
  }

  static const char* value(const ::ist_building_msgs::RoomInformation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc095dc11b0eae6e6ULL;
  static const uint64_t static_value2 = 0xce775e203036a201ULL;
};

template<class ContainerAllocator>
struct DataType< ::ist_building_msgs::RoomInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ist_building_msgs/RoomInformation";
  }

  static const char* value(const ::ist_building_msgs::RoomInformation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ist_building_msgs::RoomInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Polygon room_min_max		# first point provides the minimum (x,y)-coordinate values of the rooms, second point provides the maximum (x,y)-coordinate values of the rooms\n\
geometry_msgs/Point32 room_center		# provides the (x,y)-coordinate values of the room centers\n\
================================================================================\n\
MSG: geometry_msgs/Polygon\n\
#A specification of a polygon where the first and last points are assumed to be connected\n\
Point32[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::ist_building_msgs::RoomInformation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ist_building_msgs::RoomInformation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.room_min_max);
      stream.next(m.room_center);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RoomInformation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ist_building_msgs::RoomInformation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ist_building_msgs::RoomInformation_<ContainerAllocator>& v)
  {
    s << indent << "room_min_max: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.room_min_max);
    s << indent << "room_center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.room_center);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IST_BUILDING_MSGS_MESSAGE_ROOMINFORMATION_H
