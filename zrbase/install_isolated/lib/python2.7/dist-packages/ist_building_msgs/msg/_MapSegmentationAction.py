# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ist_building_msgs/MapSegmentationAction.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actionlib_msgs.msg
import geometry_msgs.msg
import sensor_msgs.msg
import ist_building_msgs.msg
import genpy
import std_msgs.msg

class MapSegmentationAction(genpy.Message):
  _md5sum = "21726e308a3b073a3859cee695f6b813"
  _type = "ist_building_msgs/MapSegmentationAction"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

MapSegmentationActionGoal action_goal
MapSegmentationActionResult action_result
MapSegmentationActionFeedback action_feedback

================================================================================
MSG: ist_building_msgs/MapSegmentationActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
MapSegmentationGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: ist_building_msgs/MapSegmentationGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Map Segmentation action
# Provides interface to get the segmented map

# goal definition
sensor_msgs/Image input_map				# the action server need a map as a input image to segment it, IMPORTANT: The algorithm needs a black and white 8bit single-channel image (format 8UC1), which is 0 (black) for obstacles and 255 (white) for free space
float32 map_resolution					# the resolution of the map in [meter/cell]
geometry_msgs/Pose map_origin			# the origin of the map in [meter]
bool return_format_in_pixel				# return room data (see below) in [pixel]
bool return_format_in_meter				# return room data (see below) in [meter]
float32 robot_radius					# in [meter]; if this variable is set to a value greater than 0, the room centers are chosen at locations that are reachable from neighboring rooms (i.e. not inside the legs of a table surrounded by chairs)
int32 room_segmentation_algorithm		# optionally overrides the parameterized segmentation method (if -1 it just takes the preset)
										#  0 = take the preset (parameterized) method
										#  1 = MorphologicalSegmentation
										#  2 = DistanceSegmentation
										#  3 = VoronoiSegmentation
										#  4 = SemanticSegmentation
										#  5 = RandomFieldSegmentation
										# 99 = PassThrough (just get a pre-segmented map into the right output format)


================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: ist_building_msgs/MapSegmentationActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
MapSegmentationResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: ist_building_msgs/MapSegmentationResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

# result definition
sensor_msgs/Image segmented_map			# the action server returns a map segmented into rooms which carry the segment number in every pixel cell, format 32SC1, room labels from 1 to N, room with label i -> access to room_information_in_pixel[i-1]
float32 map_resolution					# the resolution of the segmented map in [meter/cell]
geometry_msgs/Pose map_origin			# the origin of the segmented map in [meter]
# for the following data: value in pixel can be obtained when the value of [return_format_in_pixel] from goal definition is true
# the computed room centers are not the centroids of the room cells (which could be located outside of the rooms)
# but accessible map pixels located within the center of the largest free space in the room
ist_building_msgs/RoomInformation[] room_information_in_pixel		# room data (min/max coordinates, center coordinates) measured in pixels
# for the following data: value in meter can be obtained when the value of [return_format_in_meter] from goal definition is true
# the computed room centers are not the centroids of the room cells (which could be located outside of the rooms)
# but accessible map pixels located within the center of the largest free space in the room
ist_building_msgs/RoomInformation[] room_information_in_meter		# room data (min/max coordinates, center coordinates) measured in meters
# if wanted the 5th algorithm (vrf) can return single points labeled as a doorway
geometry_msgs/Point32[] doorway_points


================================================================================
MSG: ist_building_msgs/RoomInformation
geometry_msgs/Polygon room_min_max		# first point provides the minimum (x,y)-coordinate values of the rooms, second point provides the maximum (x,y)-coordinate values of the rooms
geometry_msgs/Point32 room_center		# provides the (x,y)-coordinate values of the room centers
================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: ist_building_msgs/MapSegmentationActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
MapSegmentationFeedback feedback

================================================================================
MSG: ist_building_msgs/MapSegmentationFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

#feedback definition
"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['ist_building_msgs/MapSegmentationActionGoal','ist_building_msgs/MapSegmentationActionResult','ist_building_msgs/MapSegmentationActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MapSegmentationAction, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = ist_building_msgs.msg.MapSegmentationActionGoal()
      if self.action_result is None:
        self.action_result = ist_building_msgs.msg.MapSegmentationActionResult()
      if self.action_feedback is None:
        self.action_feedback = ist_building_msgs.msg.MapSegmentationActionFeedback()
    else:
      self.action_goal = ist_building_msgs.msg.MapSegmentationActionGoal()
      self.action_result = ist_building_msgs.msg.MapSegmentationActionResult()
      self.action_feedback = ist_building_msgs.msg.MapSegmentationActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.input_map.header.seq, _x.action_goal.goal.input_map.header.stamp.secs, _x.action_goal.goal.input_map.header.stamp.nsecs))
      _x = self.action_goal.goal.input_map.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal.input_map.height, _x.action_goal.goal.input_map.width))
      _x = self.action_goal.goal.input_map.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.action_goal.goal.input_map.is_bigendian, _x.action_goal.goal.input_map.step))
      _x = self.action_goal.goal.input_map.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_f7d2Bfi3I().pack(_x.action_goal.goal.map_resolution, _x.action_goal.goal.map_origin.position.x, _x.action_goal.goal.map_origin.position.y, _x.action_goal.goal.map_origin.position.z, _x.action_goal.goal.map_origin.orientation.x, _x.action_goal.goal.map_origin.orientation.y, _x.action_goal.goal.map_origin.orientation.z, _x.action_goal.goal.map_origin.orientation.w, _x.action_goal.goal.return_format_in_pixel, _x.action_goal.goal.return_format_in_meter, _x.action_goal.goal.robot_radius, _x.action_goal.goal.room_segmentation_algorithm, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.result.segmented_map.header.seq, _x.action_result.result.segmented_map.header.stamp.secs, _x.action_result.result.segmented_map.header.stamp.nsecs))
      _x = self.action_result.result.segmented_map.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.result.segmented_map.height, _x.action_result.result.segmented_map.width))
      _x = self.action_result.result.segmented_map.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.action_result.result.segmented_map.is_bigendian, _x.action_result.result.segmented_map.step))
      _x = self.action_result.result.segmented_map.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_f7d().pack(_x.action_result.result.map_resolution, _x.action_result.result.map_origin.position.x, _x.action_result.result.map_origin.position.y, _x.action_result.result.map_origin.position.z, _x.action_result.result.map_origin.orientation.x, _x.action_result.result.map_origin.orientation.y, _x.action_result.result.map_origin.orientation.z, _x.action_result.result.map_origin.orientation.w))
      length = len(self.action_result.result.room_information_in_pixel)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.room_information_in_pixel:
        _v1 = val1.room_min_max
        length = len(_v1.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v2 = val1.room_center
        _x = _v2
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.action_result.result.room_information_in_meter)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.room_information_in_meter:
        _v3 = val1.room_min_max
        length = len(_v3.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v3.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v4 = val1.room_center
        _x = _v4
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.action_result.result.doorway_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.doorway_points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.action_goal is None:
        self.action_goal = ist_building_msgs.msg.MapSegmentationActionGoal()
      if self.action_result is None:
        self.action_result = ist_building_msgs.msg.MapSegmentationActionResult()
      if self.action_feedback is None:
        self.action_feedback = ist_building_msgs.msg.MapSegmentationActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.input_map.header.seq, _x.action_goal.goal.input_map.header.stamp.secs, _x.action_goal.goal.input_map.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.input_map.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.input_map.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal.input_map.height, _x.action_goal.goal.input_map.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.input_map.encoding = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.input_map.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.action_goal.goal.input_map.is_bigendian, _x.action_goal.goal.input_map.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_goal.goal.input_map.data = str[start:end]
      _x = self
      start = end
      end += 82
      (_x.action_goal.goal.map_resolution, _x.action_goal.goal.map_origin.position.x, _x.action_goal.goal.map_origin.position.y, _x.action_goal.goal.map_origin.position.z, _x.action_goal.goal.map_origin.orientation.x, _x.action_goal.goal.map_origin.orientation.y, _x.action_goal.goal.map_origin.orientation.z, _x.action_goal.goal.map_origin.orientation.w, _x.action_goal.goal.return_format_in_pixel, _x.action_goal.goal.return_format_in_meter, _x.action_goal.goal.robot_radius, _x.action_goal.goal.room_segmentation_algorithm, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_f7d2Bfi3I().unpack(str[start:end])
      self.action_goal.goal.return_format_in_pixel = bool(self.action_goal.goal.return_format_in_pixel)
      self.action_goal.goal.return_format_in_meter = bool(self.action_goal.goal.return_format_in_meter)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_result.result.segmented_map.header.seq, _x.action_result.result.segmented_map.header.stamp.secs, _x.action_result.result.segmented_map.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.segmented_map.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.segmented_map.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.result.segmented_map.height, _x.action_result.result.segmented_map.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.segmented_map.encoding = str[start:end].decode('utf-8')
      else:
        self.action_result.result.segmented_map.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.action_result.result.segmented_map.is_bigendian, _x.action_result.result.segmented_map.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_result.result.segmented_map.data = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.action_result.result.map_resolution, _x.action_result.result.map_origin.position.x, _x.action_result.result.map_origin.position.y, _x.action_result.result.map_origin.position.z, _x.action_result.result.map_origin.orientation.x, _x.action_result.result.map_origin.orientation.y, _x.action_result.result.map_origin.orientation.z, _x.action_result.result.map_origin.orientation.w,) = _get_struct_f7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.room_information_in_pixel = []
      for i in range(0, length):
        val1 = ist_building_msgs.msg.RoomInformation()
        _v5 = val1.room_min_max
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v5.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v5.points.append(val3)
        _v6 = val1.room_center
        _x = _v6
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.action_result.result.room_information_in_pixel.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.room_information_in_meter = []
      for i in range(0, length):
        val1 = ist_building_msgs.msg.RoomInformation()
        _v7 = val1.room_min_max
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v7.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v7.points.append(val3)
        _v8 = val1.room_center
        _x = _v8
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.action_result.result.room_information_in_meter.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.doorway_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.action_result.result.doorway_points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.input_map.header.seq, _x.action_goal.goal.input_map.header.stamp.secs, _x.action_goal.goal.input_map.header.stamp.nsecs))
      _x = self.action_goal.goal.input_map.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal.input_map.height, _x.action_goal.goal.input_map.width))
      _x = self.action_goal.goal.input_map.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.action_goal.goal.input_map.is_bigendian, _x.action_goal.goal.input_map.step))
      _x = self.action_goal.goal.input_map.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_f7d2Bfi3I().pack(_x.action_goal.goal.map_resolution, _x.action_goal.goal.map_origin.position.x, _x.action_goal.goal.map_origin.position.y, _x.action_goal.goal.map_origin.position.z, _x.action_goal.goal.map_origin.orientation.x, _x.action_goal.goal.map_origin.orientation.y, _x.action_goal.goal.map_origin.orientation.z, _x.action_goal.goal.map_origin.orientation.w, _x.action_goal.goal.return_format_in_pixel, _x.action_goal.goal.return_format_in_meter, _x.action_goal.goal.robot_radius, _x.action_goal.goal.room_segmentation_algorithm, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.result.segmented_map.header.seq, _x.action_result.result.segmented_map.header.stamp.secs, _x.action_result.result.segmented_map.header.stamp.nsecs))
      _x = self.action_result.result.segmented_map.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.result.segmented_map.height, _x.action_result.result.segmented_map.width))
      _x = self.action_result.result.segmented_map.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.action_result.result.segmented_map.is_bigendian, _x.action_result.result.segmented_map.step))
      _x = self.action_result.result.segmented_map.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_f7d().pack(_x.action_result.result.map_resolution, _x.action_result.result.map_origin.position.x, _x.action_result.result.map_origin.position.y, _x.action_result.result.map_origin.position.z, _x.action_result.result.map_origin.orientation.x, _x.action_result.result.map_origin.orientation.y, _x.action_result.result.map_origin.orientation.z, _x.action_result.result.map_origin.orientation.w))
      length = len(self.action_result.result.room_information_in_pixel)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.room_information_in_pixel:
        _v9 = val1.room_min_max
        length = len(_v9.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v9.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v10 = val1.room_center
        _x = _v10
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.action_result.result.room_information_in_meter)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.room_information_in_meter:
        _v11 = val1.room_min_max
        length = len(_v11.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v11.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _v12 = val1.room_center
        _x = _v12
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.action_result.result.doorway_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.doorway_points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.action_goal is None:
        self.action_goal = ist_building_msgs.msg.MapSegmentationActionGoal()
      if self.action_result is None:
        self.action_result = ist_building_msgs.msg.MapSegmentationActionResult()
      if self.action_feedback is None:
        self.action_feedback = ist_building_msgs.msg.MapSegmentationActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.input_map.header.seq, _x.action_goal.goal.input_map.header.stamp.secs, _x.action_goal.goal.input_map.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.input_map.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.input_map.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal.input_map.height, _x.action_goal.goal.input_map.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.input_map.encoding = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.input_map.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.action_goal.goal.input_map.is_bigendian, _x.action_goal.goal.input_map.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_goal.goal.input_map.data = str[start:end]
      _x = self
      start = end
      end += 82
      (_x.action_goal.goal.map_resolution, _x.action_goal.goal.map_origin.position.x, _x.action_goal.goal.map_origin.position.y, _x.action_goal.goal.map_origin.position.z, _x.action_goal.goal.map_origin.orientation.x, _x.action_goal.goal.map_origin.orientation.y, _x.action_goal.goal.map_origin.orientation.z, _x.action_goal.goal.map_origin.orientation.w, _x.action_goal.goal.return_format_in_pixel, _x.action_goal.goal.return_format_in_meter, _x.action_goal.goal.robot_radius, _x.action_goal.goal.room_segmentation_algorithm, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_f7d2Bfi3I().unpack(str[start:end])
      self.action_goal.goal.return_format_in_pixel = bool(self.action_goal.goal.return_format_in_pixel)
      self.action_goal.goal.return_format_in_meter = bool(self.action_goal.goal.return_format_in_meter)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_result.result.segmented_map.header.seq, _x.action_result.result.segmented_map.header.stamp.secs, _x.action_result.result.segmented_map.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.segmented_map.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.segmented_map.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.result.segmented_map.height, _x.action_result.result.segmented_map.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.segmented_map.encoding = str[start:end].decode('utf-8')
      else:
        self.action_result.result.segmented_map.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.action_result.result.segmented_map.is_bigendian, _x.action_result.result.segmented_map.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_result.result.segmented_map.data = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.action_result.result.map_resolution, _x.action_result.result.map_origin.position.x, _x.action_result.result.map_origin.position.y, _x.action_result.result.map_origin.position.z, _x.action_result.result.map_origin.orientation.x, _x.action_result.result.map_origin.orientation.y, _x.action_result.result.map_origin.orientation.z, _x.action_result.result.map_origin.orientation.w,) = _get_struct_f7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.room_information_in_pixel = []
      for i in range(0, length):
        val1 = ist_building_msgs.msg.RoomInformation()
        _v13 = val1.room_min_max
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v13.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v13.points.append(val3)
        _v14 = val1.room_center
        _x = _v14
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.action_result.result.room_information_in_pixel.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.room_information_in_meter = []
      for i in range(0, length):
        val1 = ist_building_msgs.msg.RoomInformation()
        _v15 = val1.room_min_max
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v15.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v15.points.append(val3)
        _v16 = val1.room_center
        _x = _v16
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.action_result.result.room_information_in_meter.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.doorway_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.action_result.result.doorway_points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_f7d2Bfi3I = None
def _get_struct_f7d2Bfi3I():
    global _struct_f7d2Bfi3I
    if _struct_f7d2Bfi3I is None:
        _struct_f7d2Bfi3I = struct.Struct("<f7d2Bfi3I")
    return _struct_f7d2Bfi3I
_struct_f7d = None
def _get_struct_f7d():
    global _struct_f7d
    if _struct_f7d is None:
        _struct_f7d = struct.Struct("<f7d")
    return _struct_f7d
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
