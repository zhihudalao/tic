# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ist_building_msgs/RoomSequence.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class RoomSequence(genpy.Message):
  _md5sum = "5409a76f4f210c24eb6c06e73dcdb711"
  _type = "ist_building_msgs/RoomSequence"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32[] room_indices		# indices of those rooms that belong to one group (connected to a checkpoint,
							# i.e. the clique of rooms close [in terms of robot driving distance] to each other),
							# indices should be ordered in optimized traveling salesman sequence
geometry_msgs/Point32 checkpoint_position_in_pixel			# provides the (x,y)-coordinates of the checkpoint location for this group of rooms [in pixel]
geometry_msgs/Point32 checkpoint_position_in_meter			# provides the (x,y)-coordinates of the checkpoint location for this group of rooms [in meter]
================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['room_indices','checkpoint_position_in_pixel','checkpoint_position_in_meter']
  _slot_types = ['uint32[]','geometry_msgs/Point32','geometry_msgs/Point32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       room_indices,checkpoint_position_in_pixel,checkpoint_position_in_meter

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RoomSequence, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.room_indices is None:
        self.room_indices = []
      if self.checkpoint_position_in_pixel is None:
        self.checkpoint_position_in_pixel = geometry_msgs.msg.Point32()
      if self.checkpoint_position_in_meter is None:
        self.checkpoint_position_in_meter = geometry_msgs.msg.Point32()
    else:
      self.room_indices = []
      self.checkpoint_position_in_pixel = geometry_msgs.msg.Point32()
      self.checkpoint_position_in_meter = geometry_msgs.msg.Point32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.room_indices)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.room_indices))
      _x = self
      buff.write(_get_struct_6f().pack(_x.checkpoint_position_in_pixel.x, _x.checkpoint_position_in_pixel.y, _x.checkpoint_position_in_pixel.z, _x.checkpoint_position_in_meter.x, _x.checkpoint_position_in_meter.y, _x.checkpoint_position_in_meter.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.checkpoint_position_in_pixel is None:
        self.checkpoint_position_in_pixel = geometry_msgs.msg.Point32()
      if self.checkpoint_position_in_meter is None:
        self.checkpoint_position_in_meter = geometry_msgs.msg.Point32()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.room_indices = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 24
      (_x.checkpoint_position_in_pixel.x, _x.checkpoint_position_in_pixel.y, _x.checkpoint_position_in_pixel.z, _x.checkpoint_position_in_meter.x, _x.checkpoint_position_in_meter.y, _x.checkpoint_position_in_meter.z,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.room_indices)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.room_indices.tostring())
      _x = self
      buff.write(_get_struct_6f().pack(_x.checkpoint_position_in_pixel.x, _x.checkpoint_position_in_pixel.y, _x.checkpoint_position_in_pixel.z, _x.checkpoint_position_in_meter.x, _x.checkpoint_position_in_meter.y, _x.checkpoint_position_in_meter.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.checkpoint_position_in_pixel is None:
        self.checkpoint_position_in_pixel = geometry_msgs.msg.Point32()
      if self.checkpoint_position_in_meter is None:
        self.checkpoint_position_in_meter = geometry_msgs.msg.Point32()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.room_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 24
      (_x.checkpoint_position_in_pixel.x, _x.checkpoint_position_in_pixel.y, _x.checkpoint_position_in_pixel.z, _x.checkpoint_position_in_meter.x, _x.checkpoint_position_in_meter.y, _x.checkpoint_position_in_meter.z,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
